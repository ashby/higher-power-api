module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Acceptance {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type AcceptanceConnection {
  pageInfo: PageInfo!
  edges: [AcceptanceEdge]!
  aggregate: AggregateAcceptance!
}

input AcceptanceCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AcceptanceCreateManyInput {
  create: [AcceptanceCreateInput!]
  connect: [AcceptanceWhereUniqueInput!]
}

type AcceptanceEdge {
  node: Acceptance!
  cursor: String!
}

enum AcceptanceOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type AcceptancePreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AcceptanceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [AcceptanceScalarWhereInput!]
  OR: [AcceptanceScalarWhereInput!]
  NOT: [AcceptanceScalarWhereInput!]
}

type AcceptanceSubscriptionPayload {
  mutation: MutationType!
  node: Acceptance
  updatedFields: [String!]
  previousValues: AcceptancePreviousValues
}

input AcceptanceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AcceptanceWhereInput
  AND: [AcceptanceSubscriptionWhereInput!]
  OR: [AcceptanceSubscriptionWhereInput!]
  NOT: [AcceptanceSubscriptionWhereInput!]
}

input AcceptanceUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AcceptanceUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AcceptanceUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AcceptanceUpdateManyInput {
  create: [AcceptanceCreateInput!]
  update: [AcceptanceUpdateWithWhereUniqueNestedInput!]
  upsert: [AcceptanceUpsertWithWhereUniqueNestedInput!]
  delete: [AcceptanceWhereUniqueInput!]
  connect: [AcceptanceWhereUniqueInput!]
  set: [AcceptanceWhereUniqueInput!]
  disconnect: [AcceptanceWhereUniqueInput!]
  deleteMany: [AcceptanceScalarWhereInput!]
  updateMany: [AcceptanceUpdateManyWithWhereNestedInput!]
}

input AcceptanceUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AcceptanceUpdateManyWithWhereNestedInput {
  where: AcceptanceScalarWhereInput!
  data: AcceptanceUpdateManyDataInput!
}

input AcceptanceUpdateWithWhereUniqueNestedInput {
  where: AcceptanceWhereUniqueInput!
  data: AcceptanceUpdateDataInput!
}

input AcceptanceUpsertWithWhereUniqueNestedInput {
  where: AcceptanceWhereUniqueInput!
  update: AcceptanceUpdateDataInput!
  create: AcceptanceCreateInput!
}

input AcceptanceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [AcceptanceWhereInput!]
  OR: [AcceptanceWhereInput!]
  NOT: [AcceptanceWhereInput!]
}

input AcceptanceWhereUniqueInput {
  id: ID
}

type AggregateAcceptance {
  count: Int!
}

type AggregateAnger {
  count: Int!
}

type AggregateArmor {
  count: Int!
}

type AggregateBoundary {
  count: Int!
}

type AggregateCompassion {
  count: Int!
}

type AggregateCourage {
  count: Int!
}

type AggregateDefect {
  count: Int!
}

type AggregateExperience {
  count: Int!
}

type AggregateFear {
  count: Int!
}

type AggregateGratitude {
  count: Int!
}

type AggregateHas {
  count: Int!
}

type AggregateHigherPower {
  count: Int!
}

type AggregateHonor {
  count: Int!
}

type AggregateHope {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateLoyalty {
  count: Int!
}

type AggregateObsession {
  count: Int!
}

type AggregatePride {
  count: Int!
}

type AggregateResentment {
  count: Int!
}

type AggregateSalvation {
  count: Int!
}

type AggregateSelfPity {
  count: Int!
}

type AggregateStrength {
  count: Int!
}

type AggregateSuffering {
  count: Int!
}

type AggregateToxicity {
  count: Int!
}

type AggregateTrauma {
  count: Int!
}

type AggregateVulnerability {
  count: Int!
}

type Anger {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type AngerConnection {
  pageInfo: PageInfo!
  edges: [AngerEdge]!
  aggregate: AggregateAnger!
}

input AngerCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AngerCreateManyInput {
  create: [AngerCreateInput!]
  connect: [AngerWhereUniqueInput!]
}

type AngerEdge {
  node: Anger!
  cursor: String!
}

enum AngerOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type AngerPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AngerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [AngerScalarWhereInput!]
  OR: [AngerScalarWhereInput!]
  NOT: [AngerScalarWhereInput!]
}

type AngerSubscriptionPayload {
  mutation: MutationType!
  node: Anger
  updatedFields: [String!]
  previousValues: AngerPreviousValues
}

input AngerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AngerWhereInput
  AND: [AngerSubscriptionWhereInput!]
  OR: [AngerSubscriptionWhereInput!]
  NOT: [AngerSubscriptionWhereInput!]
}

input AngerUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AngerUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AngerUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AngerUpdateManyInput {
  create: [AngerCreateInput!]
  update: [AngerUpdateWithWhereUniqueNestedInput!]
  upsert: [AngerUpsertWithWhereUniqueNestedInput!]
  delete: [AngerWhereUniqueInput!]
  connect: [AngerWhereUniqueInput!]
  set: [AngerWhereUniqueInput!]
  disconnect: [AngerWhereUniqueInput!]
  deleteMany: [AngerScalarWhereInput!]
  updateMany: [AngerUpdateManyWithWhereNestedInput!]
}

input AngerUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input AngerUpdateManyWithWhereNestedInput {
  where: AngerScalarWhereInput!
  data: AngerUpdateManyDataInput!
}

input AngerUpdateWithWhereUniqueNestedInput {
  where: AngerWhereUniqueInput!
  data: AngerUpdateDataInput!
}

input AngerUpsertWithWhereUniqueNestedInput {
  where: AngerWhereUniqueInput!
  update: AngerUpdateDataInput!
  create: AngerCreateInput!
}

input AngerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [AngerWhereInput!]
  OR: [AngerWhereInput!]
  NOT: [AngerWhereInput!]
}

input AngerWhereUniqueInput {
  id: ID
}

type Armor {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type ArmorConnection {
  pageInfo: PageInfo!
  edges: [ArmorEdge]!
  aggregate: AggregateArmor!
}

input ArmorCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ArmorCreateManyInput {
  create: [ArmorCreateInput!]
  connect: [ArmorWhereUniqueInput!]
}

type ArmorEdge {
  node: Armor!
  cursor: String!
}

enum ArmorOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type ArmorPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ArmorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [ArmorScalarWhereInput!]
  OR: [ArmorScalarWhereInput!]
  NOT: [ArmorScalarWhereInput!]
}

type ArmorSubscriptionPayload {
  mutation: MutationType!
  node: Armor
  updatedFields: [String!]
  previousValues: ArmorPreviousValues
}

input ArmorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ArmorWhereInput
  AND: [ArmorSubscriptionWhereInput!]
  OR: [ArmorSubscriptionWhereInput!]
  NOT: [ArmorSubscriptionWhereInput!]
}

input ArmorUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ArmorUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ArmorUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ArmorUpdateManyInput {
  create: [ArmorCreateInput!]
  update: [ArmorUpdateWithWhereUniqueNestedInput!]
  upsert: [ArmorUpsertWithWhereUniqueNestedInput!]
  delete: [ArmorWhereUniqueInput!]
  connect: [ArmorWhereUniqueInput!]
  set: [ArmorWhereUniqueInput!]
  disconnect: [ArmorWhereUniqueInput!]
  deleteMany: [ArmorScalarWhereInput!]
  updateMany: [ArmorUpdateManyWithWhereNestedInput!]
}

input ArmorUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ArmorUpdateManyWithWhereNestedInput {
  where: ArmorScalarWhereInput!
  data: ArmorUpdateManyDataInput!
}

input ArmorUpdateWithWhereUniqueNestedInput {
  where: ArmorWhereUniqueInput!
  data: ArmorUpdateDataInput!
}

input ArmorUpsertWithWhereUniqueNestedInput {
  where: ArmorWhereUniqueInput!
  update: ArmorUpdateDataInput!
  create: ArmorCreateInput!
}

input ArmorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [ArmorWhereInput!]
  OR: [ArmorWhereInput!]
  NOT: [ArmorWhereInput!]
}

input ArmorWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Boundary {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type BoundaryConnection {
  pageInfo: PageInfo!
  edges: [BoundaryEdge]!
  aggregate: AggregateBoundary!
}

input BoundaryCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input BoundaryCreateManyInput {
  create: [BoundaryCreateInput!]
  connect: [BoundaryWhereUniqueInput!]
}

type BoundaryEdge {
  node: Boundary!
  cursor: String!
}

enum BoundaryOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type BoundaryPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input BoundaryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [BoundaryScalarWhereInput!]
  OR: [BoundaryScalarWhereInput!]
  NOT: [BoundaryScalarWhereInput!]
}

type BoundarySubscriptionPayload {
  mutation: MutationType!
  node: Boundary
  updatedFields: [String!]
  previousValues: BoundaryPreviousValues
}

input BoundarySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoundaryWhereInput
  AND: [BoundarySubscriptionWhereInput!]
  OR: [BoundarySubscriptionWhereInput!]
  NOT: [BoundarySubscriptionWhereInput!]
}

input BoundaryUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input BoundaryUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input BoundaryUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input BoundaryUpdateManyInput {
  create: [BoundaryCreateInput!]
  update: [BoundaryUpdateWithWhereUniqueNestedInput!]
  upsert: [BoundaryUpsertWithWhereUniqueNestedInput!]
  delete: [BoundaryWhereUniqueInput!]
  connect: [BoundaryWhereUniqueInput!]
  set: [BoundaryWhereUniqueInput!]
  disconnect: [BoundaryWhereUniqueInput!]
  deleteMany: [BoundaryScalarWhereInput!]
  updateMany: [BoundaryUpdateManyWithWhereNestedInput!]
}

input BoundaryUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input BoundaryUpdateManyWithWhereNestedInput {
  where: BoundaryScalarWhereInput!
  data: BoundaryUpdateManyDataInput!
}

input BoundaryUpdateWithWhereUniqueNestedInput {
  where: BoundaryWhereUniqueInput!
  data: BoundaryUpdateDataInput!
}

input BoundaryUpsertWithWhereUniqueNestedInput {
  where: BoundaryWhereUniqueInput!
  update: BoundaryUpdateDataInput!
  create: BoundaryCreateInput!
}

input BoundaryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [BoundaryWhereInput!]
  OR: [BoundaryWhereInput!]
  NOT: [BoundaryWhereInput!]
}

input BoundaryWhereUniqueInput {
  id: ID
}

type Compassion {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type CompassionConnection {
  pageInfo: PageInfo!
  edges: [CompassionEdge]!
  aggregate: AggregateCompassion!
}

input CompassionCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CompassionCreateManyInput {
  create: [CompassionCreateInput!]
  connect: [CompassionWhereUniqueInput!]
}

type CompassionEdge {
  node: Compassion!
  cursor: String!
}

enum CompassionOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type CompassionPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CompassionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [CompassionScalarWhereInput!]
  OR: [CompassionScalarWhereInput!]
  NOT: [CompassionScalarWhereInput!]
}

type CompassionSubscriptionPayload {
  mutation: MutationType!
  node: Compassion
  updatedFields: [String!]
  previousValues: CompassionPreviousValues
}

input CompassionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompassionWhereInput
  AND: [CompassionSubscriptionWhereInput!]
  OR: [CompassionSubscriptionWhereInput!]
  NOT: [CompassionSubscriptionWhereInput!]
}

input CompassionUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CompassionUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CompassionUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CompassionUpdateManyInput {
  create: [CompassionCreateInput!]
  update: [CompassionUpdateWithWhereUniqueNestedInput!]
  upsert: [CompassionUpsertWithWhereUniqueNestedInput!]
  delete: [CompassionWhereUniqueInput!]
  connect: [CompassionWhereUniqueInput!]
  set: [CompassionWhereUniqueInput!]
  disconnect: [CompassionWhereUniqueInput!]
  deleteMany: [CompassionScalarWhereInput!]
  updateMany: [CompassionUpdateManyWithWhereNestedInput!]
}

input CompassionUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CompassionUpdateManyWithWhereNestedInput {
  where: CompassionScalarWhereInput!
  data: CompassionUpdateManyDataInput!
}

input CompassionUpdateWithWhereUniqueNestedInput {
  where: CompassionWhereUniqueInput!
  data: CompassionUpdateDataInput!
}

input CompassionUpsertWithWhereUniqueNestedInput {
  where: CompassionWhereUniqueInput!
  update: CompassionUpdateDataInput!
  create: CompassionCreateInput!
}

input CompassionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [CompassionWhereInput!]
  OR: [CompassionWhereInput!]
  NOT: [CompassionWhereInput!]
}

input CompassionWhereUniqueInput {
  id: ID
}

type Courage {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type CourageConnection {
  pageInfo: PageInfo!
  edges: [CourageEdge]!
  aggregate: AggregateCourage!
}

input CourageCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CourageCreateManyInput {
  create: [CourageCreateInput!]
  connect: [CourageWhereUniqueInput!]
}

type CourageEdge {
  node: Courage!
  cursor: String!
}

enum CourageOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type CouragePreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CourageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [CourageScalarWhereInput!]
  OR: [CourageScalarWhereInput!]
  NOT: [CourageScalarWhereInput!]
}

type CourageSubscriptionPayload {
  mutation: MutationType!
  node: Courage
  updatedFields: [String!]
  previousValues: CouragePreviousValues
}

input CourageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourageWhereInput
  AND: [CourageSubscriptionWhereInput!]
  OR: [CourageSubscriptionWhereInput!]
  NOT: [CourageSubscriptionWhereInput!]
}

input CourageUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CourageUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CourageUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CourageUpdateManyInput {
  create: [CourageCreateInput!]
  update: [CourageUpdateWithWhereUniqueNestedInput!]
  upsert: [CourageUpsertWithWhereUniqueNestedInput!]
  delete: [CourageWhereUniqueInput!]
  connect: [CourageWhereUniqueInput!]
  set: [CourageWhereUniqueInput!]
  disconnect: [CourageWhereUniqueInput!]
  deleteMany: [CourageScalarWhereInput!]
  updateMany: [CourageUpdateManyWithWhereNestedInput!]
}

input CourageUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input CourageUpdateManyWithWhereNestedInput {
  where: CourageScalarWhereInput!
  data: CourageUpdateManyDataInput!
}

input CourageUpdateWithWhereUniqueNestedInput {
  where: CourageWhereUniqueInput!
  data: CourageUpdateDataInput!
}

input CourageUpsertWithWhereUniqueNestedInput {
  where: CourageWhereUniqueInput!
  update: CourageUpdateDataInput!
  create: CourageCreateInput!
}

input CourageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [CourageWhereInput!]
  OR: [CourageWhereInput!]
  NOT: [CourageWhereInput!]
}

input CourageWhereUniqueInput {
  id: ID
}

scalar DateTime

type Defect {
  id: ID!
  trauma(where: TraumaWhereInput, orderBy: TraumaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trauma!]
  toxicity(where: ToxicityWhereInput, orderBy: ToxicityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Toxicity!]
  suffering(where: SufferingWhereInput, orderBy: SufferingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suffering!]
}

type DefectConnection {
  pageInfo: PageInfo!
  edges: [DefectEdge]!
  aggregate: AggregateDefect!
}

input DefectCreateInput {
  id: ID
  trauma: TraumaCreateManyInput
  toxicity: ToxicityCreateManyInput
  suffering: SufferingCreateManyInput
}

input DefectCreateManyInput {
  create: [DefectCreateInput!]
  connect: [DefectWhereUniqueInput!]
}

type DefectEdge {
  node: Defect!
  cursor: String!
}

enum DefectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DefectPreviousValues {
  id: ID!
}

input DefectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [DefectScalarWhereInput!]
  OR: [DefectScalarWhereInput!]
  NOT: [DefectScalarWhereInput!]
}

type DefectSubscriptionPayload {
  mutation: MutationType!
  node: Defect
  updatedFields: [String!]
  previousValues: DefectPreviousValues
}

input DefectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DefectWhereInput
  AND: [DefectSubscriptionWhereInput!]
  OR: [DefectSubscriptionWhereInput!]
  NOT: [DefectSubscriptionWhereInput!]
}

input DefectUpdateDataInput {
  trauma: TraumaUpdateManyInput
  toxicity: ToxicityUpdateManyInput
  suffering: SufferingUpdateManyInput
}

input DefectUpdateInput {
  trauma: TraumaUpdateManyInput
  toxicity: ToxicityUpdateManyInput
  suffering: SufferingUpdateManyInput
}

input DefectUpdateManyInput {
  create: [DefectCreateInput!]
  update: [DefectUpdateWithWhereUniqueNestedInput!]
  upsert: [DefectUpsertWithWhereUniqueNestedInput!]
  delete: [DefectWhereUniqueInput!]
  connect: [DefectWhereUniqueInput!]
  set: [DefectWhereUniqueInput!]
  disconnect: [DefectWhereUniqueInput!]
  deleteMany: [DefectScalarWhereInput!]
}

input DefectUpdateWithWhereUniqueNestedInput {
  where: DefectWhereUniqueInput!
  data: DefectUpdateDataInput!
}

input DefectUpsertWithWhereUniqueNestedInput {
  where: DefectWhereUniqueInput!
  update: DefectUpdateDataInput!
  create: DefectCreateInput!
}

input DefectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  trauma_every: TraumaWhereInput
  trauma_some: TraumaWhereInput
  trauma_none: TraumaWhereInput
  toxicity_every: ToxicityWhereInput
  toxicity_some: ToxicityWhereInput
  toxicity_none: ToxicityWhereInput
  suffering_every: SufferingWhereInput
  suffering_some: SufferingWhereInput
  suffering_none: SufferingWhereInput
  AND: [DefectWhereInput!]
  OR: [DefectWhereInput!]
  NOT: [DefectWhereInput!]
}

input DefectWhereUniqueInput {
  id: ID
}

type Experience {
  id: ID!
  compassion(where: CompassionWhereInput, orderBy: CompassionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Compassion!]
  courage(where: CourageWhereInput, orderBy: CourageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Courage!]
  acceptance(where: AcceptanceWhereInput, orderBy: AcceptanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Acceptance!]
  vulnerability(where: VulnerabilityWhereInput, orderBy: VulnerabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vulnerability!]
  gratitude(where: GratitudeWhereInput, orderBy: GratitudeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gratitude!]
  suffering(where: SufferingWhereInput, orderBy: SufferingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suffering!]
}

type ExperienceConnection {
  pageInfo: PageInfo!
  edges: [ExperienceEdge]!
  aggregate: AggregateExperience!
}

input ExperienceCreateInput {
  id: ID
  compassion: CompassionCreateManyInput
  courage: CourageCreateManyInput
  acceptance: AcceptanceCreateManyInput
  vulnerability: VulnerabilityCreateManyInput
  gratitude: GratitudeCreateManyInput
  suffering: SufferingCreateManyInput
}

input ExperienceCreateManyInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

type ExperienceEdge {
  node: Experience!
  cursor: String!
}

enum ExperienceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExperiencePreviousValues {
  id: ID!
}

input ExperienceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [ExperienceScalarWhereInput!]
  OR: [ExperienceScalarWhereInput!]
  NOT: [ExperienceScalarWhereInput!]
}

type ExperienceSubscriptionPayload {
  mutation: MutationType!
  node: Experience
  updatedFields: [String!]
  previousValues: ExperiencePreviousValues
}

input ExperienceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExperienceWhereInput
  AND: [ExperienceSubscriptionWhereInput!]
  OR: [ExperienceSubscriptionWhereInput!]
  NOT: [ExperienceSubscriptionWhereInput!]
}

input ExperienceUpdateDataInput {
  compassion: CompassionUpdateManyInput
  courage: CourageUpdateManyInput
  acceptance: AcceptanceUpdateManyInput
  vulnerability: VulnerabilityUpdateManyInput
  gratitude: GratitudeUpdateManyInput
  suffering: SufferingUpdateManyInput
}

input ExperienceUpdateInput {
  compassion: CompassionUpdateManyInput
  courage: CourageUpdateManyInput
  acceptance: AcceptanceUpdateManyInput
  vulnerability: VulnerabilityUpdateManyInput
  gratitude: GratitudeUpdateManyInput
  suffering: SufferingUpdateManyInput
}

input ExperienceUpdateManyInput {
  create: [ExperienceCreateInput!]
  update: [ExperienceUpdateWithWhereUniqueNestedInput!]
  upsert: [ExperienceUpsertWithWhereUniqueNestedInput!]
  delete: [ExperienceWhereUniqueInput!]
  connect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  disconnect: [ExperienceWhereUniqueInput!]
  deleteMany: [ExperienceScalarWhereInput!]
}

input ExperienceUpdateWithWhereUniqueNestedInput {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateDataInput!
}

input ExperienceUpsertWithWhereUniqueNestedInput {
  where: ExperienceWhereUniqueInput!
  update: ExperienceUpdateDataInput!
  create: ExperienceCreateInput!
}

input ExperienceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  compassion_every: CompassionWhereInput
  compassion_some: CompassionWhereInput
  compassion_none: CompassionWhereInput
  courage_every: CourageWhereInput
  courage_some: CourageWhereInput
  courage_none: CourageWhereInput
  acceptance_every: AcceptanceWhereInput
  acceptance_some: AcceptanceWhereInput
  acceptance_none: AcceptanceWhereInput
  vulnerability_every: VulnerabilityWhereInput
  vulnerability_some: VulnerabilityWhereInput
  vulnerability_none: VulnerabilityWhereInput
  gratitude_every: GratitudeWhereInput
  gratitude_some: GratitudeWhereInput
  gratitude_none: GratitudeWhereInput
  suffering_every: SufferingWhereInput
  suffering_some: SufferingWhereInput
  suffering_none: SufferingWhereInput
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
}

input ExperienceWhereUniqueInput {
  id: ID
}

type Fear {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type FearConnection {
  pageInfo: PageInfo!
  edges: [FearEdge]!
  aggregate: AggregateFear!
}

input FearCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input FearCreateManyInput {
  create: [FearCreateInput!]
  connect: [FearWhereUniqueInput!]
}

type FearEdge {
  node: Fear!
  cursor: String!
}

enum FearOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type FearPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input FearScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [FearScalarWhereInput!]
  OR: [FearScalarWhereInput!]
  NOT: [FearScalarWhereInput!]
}

type FearSubscriptionPayload {
  mutation: MutationType!
  node: Fear
  updatedFields: [String!]
  previousValues: FearPreviousValues
}

input FearSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FearWhereInput
  AND: [FearSubscriptionWhereInput!]
  OR: [FearSubscriptionWhereInput!]
  NOT: [FearSubscriptionWhereInput!]
}

input FearUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input FearUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input FearUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input FearUpdateManyInput {
  create: [FearCreateInput!]
  update: [FearUpdateWithWhereUniqueNestedInput!]
  upsert: [FearUpsertWithWhereUniqueNestedInput!]
  delete: [FearWhereUniqueInput!]
  connect: [FearWhereUniqueInput!]
  set: [FearWhereUniqueInput!]
  disconnect: [FearWhereUniqueInput!]
  deleteMany: [FearScalarWhereInput!]
  updateMany: [FearUpdateManyWithWhereNestedInput!]
}

input FearUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input FearUpdateManyWithWhereNestedInput {
  where: FearScalarWhereInput!
  data: FearUpdateManyDataInput!
}

input FearUpdateWithWhereUniqueNestedInput {
  where: FearWhereUniqueInput!
  data: FearUpdateDataInput!
}

input FearUpsertWithWhereUniqueNestedInput {
  where: FearWhereUniqueInput!
  update: FearUpdateDataInput!
  create: FearCreateInput!
}

input FearWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [FearWhereInput!]
  OR: [FearWhereInput!]
  NOT: [FearWhereInput!]
}

input FearWhereUniqueInput {
  id: ID
}

type Gratitude {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type GratitudeConnection {
  pageInfo: PageInfo!
  edges: [GratitudeEdge]!
  aggregate: AggregateGratitude!
}

input GratitudeCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input GratitudeCreateManyInput {
  create: [GratitudeCreateInput!]
  connect: [GratitudeWhereUniqueInput!]
}

type GratitudeEdge {
  node: Gratitude!
  cursor: String!
}

enum GratitudeOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type GratitudePreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input GratitudeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [GratitudeScalarWhereInput!]
  OR: [GratitudeScalarWhereInput!]
  NOT: [GratitudeScalarWhereInput!]
}

type GratitudeSubscriptionPayload {
  mutation: MutationType!
  node: Gratitude
  updatedFields: [String!]
  previousValues: GratitudePreviousValues
}

input GratitudeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GratitudeWhereInput
  AND: [GratitudeSubscriptionWhereInput!]
  OR: [GratitudeSubscriptionWhereInput!]
  NOT: [GratitudeSubscriptionWhereInput!]
}

input GratitudeUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input GratitudeUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input GratitudeUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input GratitudeUpdateManyInput {
  create: [GratitudeCreateInput!]
  update: [GratitudeUpdateWithWhereUniqueNestedInput!]
  upsert: [GratitudeUpsertWithWhereUniqueNestedInput!]
  delete: [GratitudeWhereUniqueInput!]
  connect: [GratitudeWhereUniqueInput!]
  set: [GratitudeWhereUniqueInput!]
  disconnect: [GratitudeWhereUniqueInput!]
  deleteMany: [GratitudeScalarWhereInput!]
  updateMany: [GratitudeUpdateManyWithWhereNestedInput!]
}

input GratitudeUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input GratitudeUpdateManyWithWhereNestedInput {
  where: GratitudeScalarWhereInput!
  data: GratitudeUpdateManyDataInput!
}

input GratitudeUpdateWithWhereUniqueNestedInput {
  where: GratitudeWhereUniqueInput!
  data: GratitudeUpdateDataInput!
}

input GratitudeUpsertWithWhereUniqueNestedInput {
  where: GratitudeWhereUniqueInput!
  update: GratitudeUpdateDataInput!
  create: GratitudeCreateInput!
}

input GratitudeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [GratitudeWhereInput!]
  OR: [GratitudeWhereInput!]
  NOT: [GratitudeWhereInput!]
}

input GratitudeWhereUniqueInput {
  id: ID
}

type Has {
  id: ID!
  defect: Boolean!
  resentment: Boolean!
  obsession: Boolean!
  experience: Boolean!
  strength: Boolean!
  hope: Boolean!
  acceptance: Boolean!
  anger: Boolean!
  armor: Boolean!
  boundary: Boolean!
  compassion: Boolean!
  courage: Boolean!
  fear: Boolean!
  gratitude: Boolean!
  pride: Boolean!
  salvaltion: Boolean!
  selfPity: Boolean!
  suffering: Boolean!
  toxicity: Boolean!
  trauma: Boolean!
  vulnerability: Boolean!
}

type HasConnection {
  pageInfo: PageInfo!
  edges: [HasEdge]!
  aggregate: AggregateHas!
}

input HasCreateInput {
  id: ID
  defect: Boolean
  resentment: Boolean
  obsession: Boolean
  experience: Boolean
  strength: Boolean
  hope: Boolean
  acceptance: Boolean
  anger: Boolean
  armor: Boolean
  boundary: Boolean
  compassion: Boolean
  courage: Boolean
  fear: Boolean
  gratitude: Boolean
  pride: Boolean
  salvaltion: Boolean
  selfPity: Boolean
  suffering: Boolean
  toxicity: Boolean
  trauma: Boolean
  vulnerability: Boolean
}

type HasEdge {
  node: Has!
  cursor: String!
}

enum HasOrderByInput {
  id_ASC
  id_DESC
  defect_ASC
  defect_DESC
  resentment_ASC
  resentment_DESC
  obsession_ASC
  obsession_DESC
  experience_ASC
  experience_DESC
  strength_ASC
  strength_DESC
  hope_ASC
  hope_DESC
  acceptance_ASC
  acceptance_DESC
  anger_ASC
  anger_DESC
  armor_ASC
  armor_DESC
  boundary_ASC
  boundary_DESC
  compassion_ASC
  compassion_DESC
  courage_ASC
  courage_DESC
  fear_ASC
  fear_DESC
  gratitude_ASC
  gratitude_DESC
  pride_ASC
  pride_DESC
  salvaltion_ASC
  salvaltion_DESC
  selfPity_ASC
  selfPity_DESC
  suffering_ASC
  suffering_DESC
  toxicity_ASC
  toxicity_DESC
  trauma_ASC
  trauma_DESC
  vulnerability_ASC
  vulnerability_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HasPreviousValues {
  id: ID!
  defect: Boolean!
  resentment: Boolean!
  obsession: Boolean!
  experience: Boolean!
  strength: Boolean!
  hope: Boolean!
  acceptance: Boolean!
  anger: Boolean!
  armor: Boolean!
  boundary: Boolean!
  compassion: Boolean!
  courage: Boolean!
  fear: Boolean!
  gratitude: Boolean!
  pride: Boolean!
  salvaltion: Boolean!
  selfPity: Boolean!
  suffering: Boolean!
  toxicity: Boolean!
  trauma: Boolean!
  vulnerability: Boolean!
}

type HasSubscriptionPayload {
  mutation: MutationType!
  node: Has
  updatedFields: [String!]
  previousValues: HasPreviousValues
}

input HasSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HasWhereInput
  AND: [HasSubscriptionWhereInput!]
  OR: [HasSubscriptionWhereInput!]
  NOT: [HasSubscriptionWhereInput!]
}

input HasUpdateInput {
  defect: Boolean
  resentment: Boolean
  obsession: Boolean
  experience: Boolean
  strength: Boolean
  hope: Boolean
  acceptance: Boolean
  anger: Boolean
  armor: Boolean
  boundary: Boolean
  compassion: Boolean
  courage: Boolean
  fear: Boolean
  gratitude: Boolean
  pride: Boolean
  salvaltion: Boolean
  selfPity: Boolean
  suffering: Boolean
  toxicity: Boolean
  trauma: Boolean
  vulnerability: Boolean
}

input HasUpdateManyMutationInput {
  defect: Boolean
  resentment: Boolean
  obsession: Boolean
  experience: Boolean
  strength: Boolean
  hope: Boolean
  acceptance: Boolean
  anger: Boolean
  armor: Boolean
  boundary: Boolean
  compassion: Boolean
  courage: Boolean
  fear: Boolean
  gratitude: Boolean
  pride: Boolean
  salvaltion: Boolean
  selfPity: Boolean
  suffering: Boolean
  toxicity: Boolean
  trauma: Boolean
  vulnerability: Boolean
}

input HasWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  defect: Boolean
  defect_not: Boolean
  resentment: Boolean
  resentment_not: Boolean
  obsession: Boolean
  obsession_not: Boolean
  experience: Boolean
  experience_not: Boolean
  strength: Boolean
  strength_not: Boolean
  hope: Boolean
  hope_not: Boolean
  acceptance: Boolean
  acceptance_not: Boolean
  anger: Boolean
  anger_not: Boolean
  armor: Boolean
  armor_not: Boolean
  boundary: Boolean
  boundary_not: Boolean
  compassion: Boolean
  compassion_not: Boolean
  courage: Boolean
  courage_not: Boolean
  fear: Boolean
  fear_not: Boolean
  gratitude: Boolean
  gratitude_not: Boolean
  pride: Boolean
  pride_not: Boolean
  salvaltion: Boolean
  salvaltion_not: Boolean
  selfPity: Boolean
  selfPity_not: Boolean
  suffering: Boolean
  suffering_not: Boolean
  toxicity: Boolean
  toxicity_not: Boolean
  trauma: Boolean
  trauma_not: Boolean
  vulnerability: Boolean
  vulnerability_not: Boolean
  AND: [HasWhereInput!]
  OR: [HasWhereInput!]
  NOT: [HasWhereInput!]
}

input HasWhereUniqueInput {
  id: ID
}

type HigherPower {
  id: ID!
  inventory: Inventory
}

type HigherPowerConnection {
  pageInfo: PageInfo!
  edges: [HigherPowerEdge]!
  aggregate: AggregateHigherPower!
}

input HigherPowerCreateInput {
  id: ID
  inventory: InventoryCreateOneInput
}

type HigherPowerEdge {
  node: HigherPower!
  cursor: String!
}

enum HigherPowerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HigherPowerPreviousValues {
  id: ID!
}

type HigherPowerSubscriptionPayload {
  mutation: MutationType!
  node: HigherPower
  updatedFields: [String!]
  previousValues: HigherPowerPreviousValues
}

input HigherPowerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HigherPowerWhereInput
  AND: [HigherPowerSubscriptionWhereInput!]
  OR: [HigherPowerSubscriptionWhereInput!]
  NOT: [HigherPowerSubscriptionWhereInput!]
}

input HigherPowerUpdateInput {
  inventory: InventoryUpdateOneInput
}

input HigherPowerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  inventory: InventoryWhereInput
  AND: [HigherPowerWhereInput!]
  OR: [HigherPowerWhereInput!]
  NOT: [HigherPowerWhereInput!]
}

input HigherPowerWhereUniqueInput {
  id: ID
}

type Honor {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type HonorConnection {
  pageInfo: PageInfo!
  edges: [HonorEdge]!
  aggregate: AggregateHonor!
}

input HonorCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input HonorCreateManyInput {
  create: [HonorCreateInput!]
  connect: [HonorWhereUniqueInput!]
}

type HonorEdge {
  node: Honor!
  cursor: String!
}

enum HonorOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type HonorPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input HonorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [HonorScalarWhereInput!]
  OR: [HonorScalarWhereInput!]
  NOT: [HonorScalarWhereInput!]
}

type HonorSubscriptionPayload {
  mutation: MutationType!
  node: Honor
  updatedFields: [String!]
  previousValues: HonorPreviousValues
}

input HonorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HonorWhereInput
  AND: [HonorSubscriptionWhereInput!]
  OR: [HonorSubscriptionWhereInput!]
  NOT: [HonorSubscriptionWhereInput!]
}

input HonorUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input HonorUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input HonorUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input HonorUpdateManyInput {
  create: [HonorCreateInput!]
  update: [HonorUpdateWithWhereUniqueNestedInput!]
  upsert: [HonorUpsertWithWhereUniqueNestedInput!]
  delete: [HonorWhereUniqueInput!]
  connect: [HonorWhereUniqueInput!]
  set: [HonorWhereUniqueInput!]
  disconnect: [HonorWhereUniqueInput!]
  deleteMany: [HonorScalarWhereInput!]
  updateMany: [HonorUpdateManyWithWhereNestedInput!]
}

input HonorUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input HonorUpdateManyWithWhereNestedInput {
  where: HonorScalarWhereInput!
  data: HonorUpdateManyDataInput!
}

input HonorUpdateWithWhereUniqueNestedInput {
  where: HonorWhereUniqueInput!
  data: HonorUpdateDataInput!
}

input HonorUpsertWithWhereUniqueNestedInput {
  where: HonorWhereUniqueInput!
  update: HonorUpdateDataInput!
  create: HonorCreateInput!
}

input HonorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [HonorWhereInput!]
  OR: [HonorWhereInput!]
  NOT: [HonorWhereInput!]
}

input HonorWhereUniqueInput {
  id: ID
}

type Hope {
  id: ID!
  salvation(where: SalvationWhereInput, orderBy: SalvationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Salvation!]
}

type HopeConnection {
  pageInfo: PageInfo!
  edges: [HopeEdge]!
  aggregate: AggregateHope!
}

input HopeCreateInput {
  id: ID
  salvation: SalvationCreateManyInput
}

input HopeCreateManyInput {
  create: [HopeCreateInput!]
  connect: [HopeWhereUniqueInput!]
}

type HopeEdge {
  node: Hope!
  cursor: String!
}

enum HopeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HopePreviousValues {
  id: ID!
}

input HopeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [HopeScalarWhereInput!]
  OR: [HopeScalarWhereInput!]
  NOT: [HopeScalarWhereInput!]
}

type HopeSubscriptionPayload {
  mutation: MutationType!
  node: Hope
  updatedFields: [String!]
  previousValues: HopePreviousValues
}

input HopeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HopeWhereInput
  AND: [HopeSubscriptionWhereInput!]
  OR: [HopeSubscriptionWhereInput!]
  NOT: [HopeSubscriptionWhereInput!]
}

input HopeUpdateDataInput {
  salvation: SalvationUpdateManyInput
}

input HopeUpdateInput {
  salvation: SalvationUpdateManyInput
}

input HopeUpdateManyInput {
  create: [HopeCreateInput!]
  update: [HopeUpdateWithWhereUniqueNestedInput!]
  upsert: [HopeUpsertWithWhereUniqueNestedInput!]
  delete: [HopeWhereUniqueInput!]
  connect: [HopeWhereUniqueInput!]
  set: [HopeWhereUniqueInput!]
  disconnect: [HopeWhereUniqueInput!]
  deleteMany: [HopeScalarWhereInput!]
}

input HopeUpdateWithWhereUniqueNestedInput {
  where: HopeWhereUniqueInput!
  data: HopeUpdateDataInput!
}

input HopeUpsertWithWhereUniqueNestedInput {
  where: HopeWhereUniqueInput!
  update: HopeUpdateDataInput!
  create: HopeCreateInput!
}

input HopeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  salvation_every: SalvationWhereInput
  salvation_some: SalvationWhereInput
  salvation_none: SalvationWhereInput
  AND: [HopeWhereInput!]
  OR: [HopeWhereInput!]
  NOT: [HopeWhereInput!]
}

input HopeWhereUniqueInput {
  id: ID
}

type Inventory {
  id: ID!
  defect(where: DefectWhereInput, orderBy: DefectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Defect!]
  resentment(where: ResentmentWhereInput, orderBy: ResentmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resentment!]
  obsession(where: ObsessionWhereInput, orderBy: ObsessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Obsession!]
  experience(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Experience!]
  strength(where: StrengthWhereInput, orderBy: StrengthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Strength!]
  hope(where: HopeWhereInput, orderBy: HopeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hope!]
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  id: ID
  defect: DefectCreateManyInput
  resentment: ResentmentCreateManyInput
  obsession: ObsessionCreateManyInput
  experience: ExperienceCreateManyInput
  strength: StrengthCreateManyInput
  hope: HopeCreateManyInput
}

input InventoryCreateOneInput {
  create: InventoryCreateInput
  connect: InventoryWhereUniqueInput
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  id: ID!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateDataInput {
  defect: DefectUpdateManyInput
  resentment: ResentmentUpdateManyInput
  obsession: ObsessionUpdateManyInput
  experience: ExperienceUpdateManyInput
  strength: StrengthUpdateManyInput
  hope: HopeUpdateManyInput
}

input InventoryUpdateInput {
  defect: DefectUpdateManyInput
  resentment: ResentmentUpdateManyInput
  obsession: ObsessionUpdateManyInput
  experience: ExperienceUpdateManyInput
  strength: StrengthUpdateManyInput
  hope: HopeUpdateManyInput
}

input InventoryUpdateOneInput {
  create: InventoryCreateInput
  update: InventoryUpdateDataInput
  upsert: InventoryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: InventoryWhereUniqueInput
}

input InventoryUpsertNestedInput {
  update: InventoryUpdateDataInput!
  create: InventoryCreateInput!
}

input InventoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  defect_every: DefectWhereInput
  defect_some: DefectWhereInput
  defect_none: DefectWhereInput
  resentment_every: ResentmentWhereInput
  resentment_some: ResentmentWhereInput
  resentment_none: ResentmentWhereInput
  obsession_every: ObsessionWhereInput
  obsession_some: ObsessionWhereInput
  obsession_none: ObsessionWhereInput
  experience_every: ExperienceWhereInput
  experience_some: ExperienceWhereInput
  experience_none: ExperienceWhereInput
  strength_every: StrengthWhereInput
  strength_some: StrengthWhereInput
  strength_none: StrengthWhereInput
  hope_every: HopeWhereInput
  hope_some: HopeWhereInput
  hope_none: HopeWhereInput
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

input InventoryWhereUniqueInput {
  id: ID
}

scalar Long

type Loyalty {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type LoyaltyConnection {
  pageInfo: PageInfo!
  edges: [LoyaltyEdge]!
  aggregate: AggregateLoyalty!
}

input LoyaltyCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input LoyaltyCreateManyInput {
  create: [LoyaltyCreateInput!]
  connect: [LoyaltyWhereUniqueInput!]
}

type LoyaltyEdge {
  node: Loyalty!
  cursor: String!
}

enum LoyaltyOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type LoyaltyPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input LoyaltyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [LoyaltyScalarWhereInput!]
  OR: [LoyaltyScalarWhereInput!]
  NOT: [LoyaltyScalarWhereInput!]
}

type LoyaltySubscriptionPayload {
  mutation: MutationType!
  node: Loyalty
  updatedFields: [String!]
  previousValues: LoyaltyPreviousValues
}

input LoyaltySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LoyaltyWhereInput
  AND: [LoyaltySubscriptionWhereInput!]
  OR: [LoyaltySubscriptionWhereInput!]
  NOT: [LoyaltySubscriptionWhereInput!]
}

input LoyaltyUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input LoyaltyUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input LoyaltyUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input LoyaltyUpdateManyInput {
  create: [LoyaltyCreateInput!]
  update: [LoyaltyUpdateWithWhereUniqueNestedInput!]
  upsert: [LoyaltyUpsertWithWhereUniqueNestedInput!]
  delete: [LoyaltyWhereUniqueInput!]
  connect: [LoyaltyWhereUniqueInput!]
  set: [LoyaltyWhereUniqueInput!]
  disconnect: [LoyaltyWhereUniqueInput!]
  deleteMany: [LoyaltyScalarWhereInput!]
  updateMany: [LoyaltyUpdateManyWithWhereNestedInput!]
}

input LoyaltyUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input LoyaltyUpdateManyWithWhereNestedInput {
  where: LoyaltyScalarWhereInput!
  data: LoyaltyUpdateManyDataInput!
}

input LoyaltyUpdateWithWhereUniqueNestedInput {
  where: LoyaltyWhereUniqueInput!
  data: LoyaltyUpdateDataInput!
}

input LoyaltyUpsertWithWhereUniqueNestedInput {
  where: LoyaltyWhereUniqueInput!
  update: LoyaltyUpdateDataInput!
  create: LoyaltyCreateInput!
}

input LoyaltyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [LoyaltyWhereInput!]
  OR: [LoyaltyWhereInput!]
  NOT: [LoyaltyWhereInput!]
}

input LoyaltyWhereUniqueInput {
  id: ID
}

type Mutation {
  createAcceptance(data: AcceptanceCreateInput!): Acceptance!
  updateAcceptance(data: AcceptanceUpdateInput!, where: AcceptanceWhereUniqueInput!): Acceptance
  updateManyAcceptances(data: AcceptanceUpdateManyMutationInput!, where: AcceptanceWhereInput): BatchPayload!
  upsertAcceptance(where: AcceptanceWhereUniqueInput!, create: AcceptanceCreateInput!, update: AcceptanceUpdateInput!): Acceptance!
  deleteAcceptance(where: AcceptanceWhereUniqueInput!): Acceptance
  deleteManyAcceptances(where: AcceptanceWhereInput): BatchPayload!
  createAnger(data: AngerCreateInput!): Anger!
  updateAnger(data: AngerUpdateInput!, where: AngerWhereUniqueInput!): Anger
  updateManyAngers(data: AngerUpdateManyMutationInput!, where: AngerWhereInput): BatchPayload!
  upsertAnger(where: AngerWhereUniqueInput!, create: AngerCreateInput!, update: AngerUpdateInput!): Anger!
  deleteAnger(where: AngerWhereUniqueInput!): Anger
  deleteManyAngers(where: AngerWhereInput): BatchPayload!
  createArmor(data: ArmorCreateInput!): Armor!
  updateArmor(data: ArmorUpdateInput!, where: ArmorWhereUniqueInput!): Armor
  updateManyArmors(data: ArmorUpdateManyMutationInput!, where: ArmorWhereInput): BatchPayload!
  upsertArmor(where: ArmorWhereUniqueInput!, create: ArmorCreateInput!, update: ArmorUpdateInput!): Armor!
  deleteArmor(where: ArmorWhereUniqueInput!): Armor
  deleteManyArmors(where: ArmorWhereInput): BatchPayload!
  createBoundary(data: BoundaryCreateInput!): Boundary!
  updateBoundary(data: BoundaryUpdateInput!, where: BoundaryWhereUniqueInput!): Boundary
  updateManyBoundaries(data: BoundaryUpdateManyMutationInput!, where: BoundaryWhereInput): BatchPayload!
  upsertBoundary(where: BoundaryWhereUniqueInput!, create: BoundaryCreateInput!, update: BoundaryUpdateInput!): Boundary!
  deleteBoundary(where: BoundaryWhereUniqueInput!): Boundary
  deleteManyBoundaries(where: BoundaryWhereInput): BatchPayload!
  createCompassion(data: CompassionCreateInput!): Compassion!
  updateCompassion(data: CompassionUpdateInput!, where: CompassionWhereUniqueInput!): Compassion
  updateManyCompassions(data: CompassionUpdateManyMutationInput!, where: CompassionWhereInput): BatchPayload!
  upsertCompassion(where: CompassionWhereUniqueInput!, create: CompassionCreateInput!, update: CompassionUpdateInput!): Compassion!
  deleteCompassion(where: CompassionWhereUniqueInput!): Compassion
  deleteManyCompassions(where: CompassionWhereInput): BatchPayload!
  createCourage(data: CourageCreateInput!): Courage!
  updateCourage(data: CourageUpdateInput!, where: CourageWhereUniqueInput!): Courage
  updateManyCourages(data: CourageUpdateManyMutationInput!, where: CourageWhereInput): BatchPayload!
  upsertCourage(where: CourageWhereUniqueInput!, create: CourageCreateInput!, update: CourageUpdateInput!): Courage!
  deleteCourage(where: CourageWhereUniqueInput!): Courage
  deleteManyCourages(where: CourageWhereInput): BatchPayload!
  createDefect(data: DefectCreateInput!): Defect!
  updateDefect(data: DefectUpdateInput!, where: DefectWhereUniqueInput!): Defect
  upsertDefect(where: DefectWhereUniqueInput!, create: DefectCreateInput!, update: DefectUpdateInput!): Defect!
  deleteDefect(where: DefectWhereUniqueInput!): Defect
  deleteManyDefects(where: DefectWhereInput): BatchPayload!
  createExperience(data: ExperienceCreateInput!): Experience!
  updateExperience(data: ExperienceUpdateInput!, where: ExperienceWhereUniqueInput!): Experience
  upsertExperience(where: ExperienceWhereUniqueInput!, create: ExperienceCreateInput!, update: ExperienceUpdateInput!): Experience!
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteManyExperiences(where: ExperienceWhereInput): BatchPayload!
  createFear(data: FearCreateInput!): Fear!
  updateFear(data: FearUpdateInput!, where: FearWhereUniqueInput!): Fear
  updateManyFears(data: FearUpdateManyMutationInput!, where: FearWhereInput): BatchPayload!
  upsertFear(where: FearWhereUniqueInput!, create: FearCreateInput!, update: FearUpdateInput!): Fear!
  deleteFear(where: FearWhereUniqueInput!): Fear
  deleteManyFears(where: FearWhereInput): BatchPayload!
  createGratitude(data: GratitudeCreateInput!): Gratitude!
  updateGratitude(data: GratitudeUpdateInput!, where: GratitudeWhereUniqueInput!): Gratitude
  updateManyGratitudes(data: GratitudeUpdateManyMutationInput!, where: GratitudeWhereInput): BatchPayload!
  upsertGratitude(where: GratitudeWhereUniqueInput!, create: GratitudeCreateInput!, update: GratitudeUpdateInput!): Gratitude!
  deleteGratitude(where: GratitudeWhereUniqueInput!): Gratitude
  deleteManyGratitudes(where: GratitudeWhereInput): BatchPayload!
  createHas(data: HasCreateInput!): Has!
  updateHas(data: HasUpdateInput!, where: HasWhereUniqueInput!): Has
  updateManyHases(data: HasUpdateManyMutationInput!, where: HasWhereInput): BatchPayload!
  upsertHas(where: HasWhereUniqueInput!, create: HasCreateInput!, update: HasUpdateInput!): Has!
  deleteHas(where: HasWhereUniqueInput!): Has
  deleteManyHases(where: HasWhereInput): BatchPayload!
  createHigherPower(data: HigherPowerCreateInput!): HigherPower!
  updateHigherPower(data: HigherPowerUpdateInput!, where: HigherPowerWhereUniqueInput!): HigherPower
  upsertHigherPower(where: HigherPowerWhereUniqueInput!, create: HigherPowerCreateInput!, update: HigherPowerUpdateInput!): HigherPower!
  deleteHigherPower(where: HigherPowerWhereUniqueInput!): HigherPower
  deleteManyHigherPowers(where: HigherPowerWhereInput): BatchPayload!
  createHonor(data: HonorCreateInput!): Honor!
  updateHonor(data: HonorUpdateInput!, where: HonorWhereUniqueInput!): Honor
  updateManyHonors(data: HonorUpdateManyMutationInput!, where: HonorWhereInput): BatchPayload!
  upsertHonor(where: HonorWhereUniqueInput!, create: HonorCreateInput!, update: HonorUpdateInput!): Honor!
  deleteHonor(where: HonorWhereUniqueInput!): Honor
  deleteManyHonors(where: HonorWhereInput): BatchPayload!
  createHope(data: HopeCreateInput!): Hope!
  updateHope(data: HopeUpdateInput!, where: HopeWhereUniqueInput!): Hope
  upsertHope(where: HopeWhereUniqueInput!, create: HopeCreateInput!, update: HopeUpdateInput!): Hope!
  deleteHope(where: HopeWhereUniqueInput!): Hope
  deleteManyHopes(where: HopeWhereInput): BatchPayload!
  createInventory(data: InventoryCreateInput!): Inventory!
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  upsertInventory(where: InventoryWhereUniqueInput!, create: InventoryCreateInput!, update: InventoryUpdateInput!): Inventory!
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createLoyalty(data: LoyaltyCreateInput!): Loyalty!
  updateLoyalty(data: LoyaltyUpdateInput!, where: LoyaltyWhereUniqueInput!): Loyalty
  updateManyLoyalties(data: LoyaltyUpdateManyMutationInput!, where: LoyaltyWhereInput): BatchPayload!
  upsertLoyalty(where: LoyaltyWhereUniqueInput!, create: LoyaltyCreateInput!, update: LoyaltyUpdateInput!): Loyalty!
  deleteLoyalty(where: LoyaltyWhereUniqueInput!): Loyalty
  deleteManyLoyalties(where: LoyaltyWhereInput): BatchPayload!
  createObsession(data: ObsessionCreateInput!): Obsession!
  updateObsession(data: ObsessionUpdateInput!, where: ObsessionWhereUniqueInput!): Obsession
  upsertObsession(where: ObsessionWhereUniqueInput!, create: ObsessionCreateInput!, update: ObsessionUpdateInput!): Obsession!
  deleteObsession(where: ObsessionWhereUniqueInput!): Obsession
  deleteManyObsessions(where: ObsessionWhereInput): BatchPayload!
  createPride(data: PrideCreateInput!): Pride!
  updatePride(data: PrideUpdateInput!, where: PrideWhereUniqueInput!): Pride
  updateManyPrides(data: PrideUpdateManyMutationInput!, where: PrideWhereInput): BatchPayload!
  upsertPride(where: PrideWhereUniqueInput!, create: PrideCreateInput!, update: PrideUpdateInput!): Pride!
  deletePride(where: PrideWhereUniqueInput!): Pride
  deleteManyPrides(where: PrideWhereInput): BatchPayload!
  createResentment(data: ResentmentCreateInput!): Resentment!
  updateResentment(data: ResentmentUpdateInput!, where: ResentmentWhereUniqueInput!): Resentment
  upsertResentment(where: ResentmentWhereUniqueInput!, create: ResentmentCreateInput!, update: ResentmentUpdateInput!): Resentment!
  deleteResentment(where: ResentmentWhereUniqueInput!): Resentment
  deleteManyResentments(where: ResentmentWhereInput): BatchPayload!
  createSalvation(data: SalvationCreateInput!): Salvation!
  updateSalvation(data: SalvationUpdateInput!, where: SalvationWhereUniqueInput!): Salvation
  updateManySalvations(data: SalvationUpdateManyMutationInput!, where: SalvationWhereInput): BatchPayload!
  upsertSalvation(where: SalvationWhereUniqueInput!, create: SalvationCreateInput!, update: SalvationUpdateInput!): Salvation!
  deleteSalvation(where: SalvationWhereUniqueInput!): Salvation
  deleteManySalvations(where: SalvationWhereInput): BatchPayload!
  createSelfPity(data: SelfPityCreateInput!): SelfPity!
  updateSelfPity(data: SelfPityUpdateInput!, where: SelfPityWhereUniqueInput!): SelfPity
  updateManySelfPities(data: SelfPityUpdateManyMutationInput!, where: SelfPityWhereInput): BatchPayload!
  upsertSelfPity(where: SelfPityWhereUniqueInput!, create: SelfPityCreateInput!, update: SelfPityUpdateInput!): SelfPity!
  deleteSelfPity(where: SelfPityWhereUniqueInput!): SelfPity
  deleteManySelfPities(where: SelfPityWhereInput): BatchPayload!
  createStrength(data: StrengthCreateInput!): Strength!
  updateStrength(data: StrengthUpdateInput!, where: StrengthWhereUniqueInput!): Strength
  upsertStrength(where: StrengthWhereUniqueInput!, create: StrengthCreateInput!, update: StrengthUpdateInput!): Strength!
  deleteStrength(where: StrengthWhereUniqueInput!): Strength
  deleteManyStrengths(where: StrengthWhereInput): BatchPayload!
  createSuffering(data: SufferingCreateInput!): Suffering!
  updateSuffering(data: SufferingUpdateInput!, where: SufferingWhereUniqueInput!): Suffering
  updateManySufferings(data: SufferingUpdateManyMutationInput!, where: SufferingWhereInput): BatchPayload!
  upsertSuffering(where: SufferingWhereUniqueInput!, create: SufferingCreateInput!, update: SufferingUpdateInput!): Suffering!
  deleteSuffering(where: SufferingWhereUniqueInput!): Suffering
  deleteManySufferings(where: SufferingWhereInput): BatchPayload!
  createToxicity(data: ToxicityCreateInput!): Toxicity!
  updateToxicity(data: ToxicityUpdateInput!, where: ToxicityWhereUniqueInput!): Toxicity
  updateManyToxicities(data: ToxicityUpdateManyMutationInput!, where: ToxicityWhereInput): BatchPayload!
  upsertToxicity(where: ToxicityWhereUniqueInput!, create: ToxicityCreateInput!, update: ToxicityUpdateInput!): Toxicity!
  deleteToxicity(where: ToxicityWhereUniqueInput!): Toxicity
  deleteManyToxicities(where: ToxicityWhereInput): BatchPayload!
  createTrauma(data: TraumaCreateInput!): Trauma!
  updateTrauma(data: TraumaUpdateInput!, where: TraumaWhereUniqueInput!): Trauma
  updateManyTraumas(data: TraumaUpdateManyMutationInput!, where: TraumaWhereInput): BatchPayload!
  upsertTrauma(where: TraumaWhereUniqueInput!, create: TraumaCreateInput!, update: TraumaUpdateInput!): Trauma!
  deleteTrauma(where: TraumaWhereUniqueInput!): Trauma
  deleteManyTraumas(where: TraumaWhereInput): BatchPayload!
  createVulnerability(data: VulnerabilityCreateInput!): Vulnerability!
  updateVulnerability(data: VulnerabilityUpdateInput!, where: VulnerabilityWhereUniqueInput!): Vulnerability
  updateManyVulnerabilities(data: VulnerabilityUpdateManyMutationInput!, where: VulnerabilityWhereInput): BatchPayload!
  upsertVulnerability(where: VulnerabilityWhereUniqueInput!, create: VulnerabilityCreateInput!, update: VulnerabilityUpdateInput!): Vulnerability!
  deleteVulnerability(where: VulnerabilityWhereUniqueInput!): Vulnerability
  deleteManyVulnerabilities(where: VulnerabilityWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Obsession {
  id: ID!
  suffering(where: SufferingWhereInput, orderBy: SufferingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suffering!]
  loyalty(where: LoyaltyWhereInput, orderBy: LoyaltyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loyalty!]
  honor(where: HonorWhereInput, orderBy: HonorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Honor!]
  vulnerability(where: VulnerabilityWhereInput, orderBy: VulnerabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vulnerability!]
}

type ObsessionConnection {
  pageInfo: PageInfo!
  edges: [ObsessionEdge]!
  aggregate: AggregateObsession!
}

input ObsessionCreateInput {
  id: ID
  suffering: SufferingCreateManyInput
  loyalty: LoyaltyCreateManyInput
  honor: HonorCreateManyInput
  vulnerability: VulnerabilityCreateManyInput
}

input ObsessionCreateManyInput {
  create: [ObsessionCreateInput!]
  connect: [ObsessionWhereUniqueInput!]
}

type ObsessionEdge {
  node: Obsession!
  cursor: String!
}

enum ObsessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ObsessionPreviousValues {
  id: ID!
}

input ObsessionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [ObsessionScalarWhereInput!]
  OR: [ObsessionScalarWhereInput!]
  NOT: [ObsessionScalarWhereInput!]
}

type ObsessionSubscriptionPayload {
  mutation: MutationType!
  node: Obsession
  updatedFields: [String!]
  previousValues: ObsessionPreviousValues
}

input ObsessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ObsessionWhereInput
  AND: [ObsessionSubscriptionWhereInput!]
  OR: [ObsessionSubscriptionWhereInput!]
  NOT: [ObsessionSubscriptionWhereInput!]
}

input ObsessionUpdateDataInput {
  suffering: SufferingUpdateManyInput
  loyalty: LoyaltyUpdateManyInput
  honor: HonorUpdateManyInput
  vulnerability: VulnerabilityUpdateManyInput
}

input ObsessionUpdateInput {
  suffering: SufferingUpdateManyInput
  loyalty: LoyaltyUpdateManyInput
  honor: HonorUpdateManyInput
  vulnerability: VulnerabilityUpdateManyInput
}

input ObsessionUpdateManyInput {
  create: [ObsessionCreateInput!]
  update: [ObsessionUpdateWithWhereUniqueNestedInput!]
  upsert: [ObsessionUpsertWithWhereUniqueNestedInput!]
  delete: [ObsessionWhereUniqueInput!]
  connect: [ObsessionWhereUniqueInput!]
  set: [ObsessionWhereUniqueInput!]
  disconnect: [ObsessionWhereUniqueInput!]
  deleteMany: [ObsessionScalarWhereInput!]
}

input ObsessionUpdateWithWhereUniqueNestedInput {
  where: ObsessionWhereUniqueInput!
  data: ObsessionUpdateDataInput!
}

input ObsessionUpsertWithWhereUniqueNestedInput {
  where: ObsessionWhereUniqueInput!
  update: ObsessionUpdateDataInput!
  create: ObsessionCreateInput!
}

input ObsessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  suffering_every: SufferingWhereInput
  suffering_some: SufferingWhereInput
  suffering_none: SufferingWhereInput
  loyalty_every: LoyaltyWhereInput
  loyalty_some: LoyaltyWhereInput
  loyalty_none: LoyaltyWhereInput
  honor_every: HonorWhereInput
  honor_some: HonorWhereInput
  honor_none: HonorWhereInput
  vulnerability_every: VulnerabilityWhereInput
  vulnerability_some: VulnerabilityWhereInput
  vulnerability_none: VulnerabilityWhereInput
  AND: [ObsessionWhereInput!]
  OR: [ObsessionWhereInput!]
  NOT: [ObsessionWhereInput!]
}

input ObsessionWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pride {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type PrideConnection {
  pageInfo: PageInfo!
  edges: [PrideEdge]!
  aggregate: AggregatePride!
}

input PrideCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input PrideCreateManyInput {
  create: [PrideCreateInput!]
  connect: [PrideWhereUniqueInput!]
}

type PrideEdge {
  node: Pride!
  cursor: String!
}

enum PrideOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type PridePreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input PrideScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [PrideScalarWhereInput!]
  OR: [PrideScalarWhereInput!]
  NOT: [PrideScalarWhereInput!]
}

type PrideSubscriptionPayload {
  mutation: MutationType!
  node: Pride
  updatedFields: [String!]
  previousValues: PridePreviousValues
}

input PrideSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PrideWhereInput
  AND: [PrideSubscriptionWhereInput!]
  OR: [PrideSubscriptionWhereInput!]
  NOT: [PrideSubscriptionWhereInput!]
}

input PrideUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input PrideUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input PrideUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input PrideUpdateManyInput {
  create: [PrideCreateInput!]
  update: [PrideUpdateWithWhereUniqueNestedInput!]
  upsert: [PrideUpsertWithWhereUniqueNestedInput!]
  delete: [PrideWhereUniqueInput!]
  connect: [PrideWhereUniqueInput!]
  set: [PrideWhereUniqueInput!]
  disconnect: [PrideWhereUniqueInput!]
  deleteMany: [PrideScalarWhereInput!]
  updateMany: [PrideUpdateManyWithWhereNestedInput!]
}

input PrideUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input PrideUpdateManyWithWhereNestedInput {
  where: PrideScalarWhereInput!
  data: PrideUpdateManyDataInput!
}

input PrideUpdateWithWhereUniqueNestedInput {
  where: PrideWhereUniqueInput!
  data: PrideUpdateDataInput!
}

input PrideUpsertWithWhereUniqueNestedInput {
  where: PrideWhereUniqueInput!
  update: PrideUpdateDataInput!
  create: PrideCreateInput!
}

input PrideWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [PrideWhereInput!]
  OR: [PrideWhereInput!]
  NOT: [PrideWhereInput!]
}

input PrideWhereUniqueInput {
  id: ID
}

type Query {
  acceptance(where: AcceptanceWhereUniqueInput!): Acceptance
  acceptances(where: AcceptanceWhereInput, orderBy: AcceptanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Acceptance]!
  acceptancesConnection(where: AcceptanceWhereInput, orderBy: AcceptanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AcceptanceConnection!
  anger(where: AngerWhereUniqueInput!): Anger
  angers(where: AngerWhereInput, orderBy: AngerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Anger]!
  angersConnection(where: AngerWhereInput, orderBy: AngerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AngerConnection!
  armor(where: ArmorWhereUniqueInput!): Armor
  armors(where: ArmorWhereInput, orderBy: ArmorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Armor]!
  armorsConnection(where: ArmorWhereInput, orderBy: ArmorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArmorConnection!
  boundary(where: BoundaryWhereUniqueInput!): Boundary
  boundaries(where: BoundaryWhereInput, orderBy: BoundaryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Boundary]!
  boundariesConnection(where: BoundaryWhereInput, orderBy: BoundaryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoundaryConnection!
  compassion(where: CompassionWhereUniqueInput!): Compassion
  compassions(where: CompassionWhereInput, orderBy: CompassionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Compassion]!
  compassionsConnection(where: CompassionWhereInput, orderBy: CompassionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompassionConnection!
  courage(where: CourageWhereUniqueInput!): Courage
  courages(where: CourageWhereInput, orderBy: CourageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Courage]!
  couragesConnection(where: CourageWhereInput, orderBy: CourageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourageConnection!
  defect(where: DefectWhereUniqueInput!): Defect
  defects(where: DefectWhereInput, orderBy: DefectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Defect]!
  defectsConnection(where: DefectWhereInput, orderBy: DefectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DefectConnection!
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiences(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Experience]!
  experiencesConnection(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExperienceConnection!
  fear(where: FearWhereUniqueInput!): Fear
  fears(where: FearWhereInput, orderBy: FearOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fear]!
  fearsConnection(where: FearWhereInput, orderBy: FearOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FearConnection!
  gratitude(where: GratitudeWhereUniqueInput!): Gratitude
  gratitudes(where: GratitudeWhereInput, orderBy: GratitudeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gratitude]!
  gratitudesConnection(where: GratitudeWhereInput, orderBy: GratitudeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GratitudeConnection!
  has(where: HasWhereUniqueInput!): Has
  hases(where: HasWhereInput, orderBy: HasOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Has]!
  hasesConnection(where: HasWhereInput, orderBy: HasOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HasConnection!
  higherPower(where: HigherPowerWhereUniqueInput!): HigherPower
  higherPowers(where: HigherPowerWhereInput, orderBy: HigherPowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HigherPower]!
  higherPowersConnection(where: HigherPowerWhereInput, orderBy: HigherPowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HigherPowerConnection!
  honor(where: HonorWhereUniqueInput!): Honor
  honors(where: HonorWhereInput, orderBy: HonorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Honor]!
  honorsConnection(where: HonorWhereInput, orderBy: HonorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HonorConnection!
  hope(where: HopeWhereUniqueInput!): Hope
  hopes(where: HopeWhereInput, orderBy: HopeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hope]!
  hopesConnection(where: HopeWhereInput, orderBy: HopeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HopeConnection!
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  loyalty(where: LoyaltyWhereUniqueInput!): Loyalty
  loyalties(where: LoyaltyWhereInput, orderBy: LoyaltyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loyalty]!
  loyaltiesConnection(where: LoyaltyWhereInput, orderBy: LoyaltyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LoyaltyConnection!
  obsession(where: ObsessionWhereUniqueInput!): Obsession
  obsessions(where: ObsessionWhereInput, orderBy: ObsessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Obsession]!
  obsessionsConnection(where: ObsessionWhereInput, orderBy: ObsessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ObsessionConnection!
  pride(where: PrideWhereUniqueInput!): Pride
  prides(where: PrideWhereInput, orderBy: PrideOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pride]!
  pridesConnection(where: PrideWhereInput, orderBy: PrideOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PrideConnection!
  resentment(where: ResentmentWhereUniqueInput!): Resentment
  resentments(where: ResentmentWhereInput, orderBy: ResentmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resentment]!
  resentmentsConnection(where: ResentmentWhereInput, orderBy: ResentmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResentmentConnection!
  salvation(where: SalvationWhereUniqueInput!): Salvation
  salvations(where: SalvationWhereInput, orderBy: SalvationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Salvation]!
  salvationsConnection(where: SalvationWhereInput, orderBy: SalvationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SalvationConnection!
  selfPity(where: SelfPityWhereUniqueInput!): SelfPity
  selfPities(where: SelfPityWhereInput, orderBy: SelfPityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SelfPity]!
  selfPitiesConnection(where: SelfPityWhereInput, orderBy: SelfPityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SelfPityConnection!
  strength(where: StrengthWhereUniqueInput!): Strength
  strengths(where: StrengthWhereInput, orderBy: StrengthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Strength]!
  strengthsConnection(where: StrengthWhereInput, orderBy: StrengthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StrengthConnection!
  suffering(where: SufferingWhereUniqueInput!): Suffering
  sufferings(where: SufferingWhereInput, orderBy: SufferingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suffering]!
  sufferingsConnection(where: SufferingWhereInput, orderBy: SufferingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SufferingConnection!
  toxicity(where: ToxicityWhereUniqueInput!): Toxicity
  toxicities(where: ToxicityWhereInput, orderBy: ToxicityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Toxicity]!
  toxicitiesConnection(where: ToxicityWhereInput, orderBy: ToxicityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ToxicityConnection!
  trauma(where: TraumaWhereUniqueInput!): Trauma
  traumas(where: TraumaWhereInput, orderBy: TraumaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trauma]!
  traumasConnection(where: TraumaWhereInput, orderBy: TraumaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TraumaConnection!
  vulnerability(where: VulnerabilityWhereUniqueInput!): Vulnerability
  vulnerabilities(where: VulnerabilityWhereInput, orderBy: VulnerabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vulnerability]!
  vulnerabilitiesConnection(where: VulnerabilityWhereInput, orderBy: VulnerabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VulnerabilityConnection!
  node(id: ID!): Node
}

type Resentment {
  id: ID!
  anger(where: AngerWhereInput, orderBy: AngerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Anger!]
  selfPity(where: SelfPityWhereInput, orderBy: SelfPityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SelfPity!]
  fear(where: FearWhereInput, orderBy: FearOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fear!]
  pride(where: PrideWhereInput, orderBy: PrideOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pride!]
}

type ResentmentConnection {
  pageInfo: PageInfo!
  edges: [ResentmentEdge]!
  aggregate: AggregateResentment!
}

input ResentmentCreateInput {
  id: ID
  anger: AngerCreateManyInput
  selfPity: SelfPityCreateManyInput
  fear: FearCreateManyInput
  pride: PrideCreateManyInput
}

input ResentmentCreateManyInput {
  create: [ResentmentCreateInput!]
  connect: [ResentmentWhereUniqueInput!]
}

type ResentmentEdge {
  node: Resentment!
  cursor: String!
}

enum ResentmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ResentmentPreviousValues {
  id: ID!
}

input ResentmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [ResentmentScalarWhereInput!]
  OR: [ResentmentScalarWhereInput!]
  NOT: [ResentmentScalarWhereInput!]
}

type ResentmentSubscriptionPayload {
  mutation: MutationType!
  node: Resentment
  updatedFields: [String!]
  previousValues: ResentmentPreviousValues
}

input ResentmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResentmentWhereInput
  AND: [ResentmentSubscriptionWhereInput!]
  OR: [ResentmentSubscriptionWhereInput!]
  NOT: [ResentmentSubscriptionWhereInput!]
}

input ResentmentUpdateDataInput {
  anger: AngerUpdateManyInput
  selfPity: SelfPityUpdateManyInput
  fear: FearUpdateManyInput
  pride: PrideUpdateManyInput
}

input ResentmentUpdateInput {
  anger: AngerUpdateManyInput
  selfPity: SelfPityUpdateManyInput
  fear: FearUpdateManyInput
  pride: PrideUpdateManyInput
}

input ResentmentUpdateManyInput {
  create: [ResentmentCreateInput!]
  update: [ResentmentUpdateWithWhereUniqueNestedInput!]
  upsert: [ResentmentUpsertWithWhereUniqueNestedInput!]
  delete: [ResentmentWhereUniqueInput!]
  connect: [ResentmentWhereUniqueInput!]
  set: [ResentmentWhereUniqueInput!]
  disconnect: [ResentmentWhereUniqueInput!]
  deleteMany: [ResentmentScalarWhereInput!]
}

input ResentmentUpdateWithWhereUniqueNestedInput {
  where: ResentmentWhereUniqueInput!
  data: ResentmentUpdateDataInput!
}

input ResentmentUpsertWithWhereUniqueNestedInput {
  where: ResentmentWhereUniqueInput!
  update: ResentmentUpdateDataInput!
  create: ResentmentCreateInput!
}

input ResentmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  anger_every: AngerWhereInput
  anger_some: AngerWhereInput
  anger_none: AngerWhereInput
  selfPity_every: SelfPityWhereInput
  selfPity_some: SelfPityWhereInput
  selfPity_none: SelfPityWhereInput
  fear_every: FearWhereInput
  fear_some: FearWhereInput
  fear_none: FearWhereInput
  pride_every: PrideWhereInput
  pride_some: PrideWhereInput
  pride_none: PrideWhereInput
  AND: [ResentmentWhereInput!]
  OR: [ResentmentWhereInput!]
  NOT: [ResentmentWhereInput!]
}

input ResentmentWhereUniqueInput {
  id: ID
}

type Salvation {
  id: ID!
  thought: String!
  character: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type SalvationConnection {
  pageInfo: PageInfo!
  edges: [SalvationEdge]!
  aggregate: AggregateSalvation!
}

input SalvationCreateInput {
  id: ID
  thought: String!
  character: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SalvationCreateManyInput {
  create: [SalvationCreateInput!]
  connect: [SalvationWhereUniqueInput!]
}

type SalvationEdge {
  node: Salvation!
  cursor: String!
}

enum SalvationOrderByInput {
  id_ASC
  id_DESC
  thought_ASC
  thought_DESC
  character_ASC
  character_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type SalvationPreviousValues {
  id: ID!
  thought: String!
  character: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SalvationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [SalvationScalarWhereInput!]
  OR: [SalvationScalarWhereInput!]
  NOT: [SalvationScalarWhereInput!]
}

type SalvationSubscriptionPayload {
  mutation: MutationType!
  node: Salvation
  updatedFields: [String!]
  previousValues: SalvationPreviousValues
}

input SalvationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SalvationWhereInput
  AND: [SalvationSubscriptionWhereInput!]
  OR: [SalvationSubscriptionWhereInput!]
  NOT: [SalvationSubscriptionWhereInput!]
}

input SalvationUpdateDataInput {
  thought: String
  character: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SalvationUpdateInput {
  thought: String
  character: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SalvationUpdateManyDataInput {
  thought: String
  character: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SalvationUpdateManyInput {
  create: [SalvationCreateInput!]
  update: [SalvationUpdateWithWhereUniqueNestedInput!]
  upsert: [SalvationUpsertWithWhereUniqueNestedInput!]
  delete: [SalvationWhereUniqueInput!]
  connect: [SalvationWhereUniqueInput!]
  set: [SalvationWhereUniqueInput!]
  disconnect: [SalvationWhereUniqueInput!]
  deleteMany: [SalvationScalarWhereInput!]
  updateMany: [SalvationUpdateManyWithWhereNestedInput!]
}

input SalvationUpdateManyMutationInput {
  thought: String
  character: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SalvationUpdateManyWithWhereNestedInput {
  where: SalvationScalarWhereInput!
  data: SalvationUpdateManyDataInput!
}

input SalvationUpdateWithWhereUniqueNestedInput {
  where: SalvationWhereUniqueInput!
  data: SalvationUpdateDataInput!
}

input SalvationUpsertWithWhereUniqueNestedInput {
  where: SalvationWhereUniqueInput!
  update: SalvationUpdateDataInput!
  create: SalvationCreateInput!
}

input SalvationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [SalvationWhereInput!]
  OR: [SalvationWhereInput!]
  NOT: [SalvationWhereInput!]
}

input SalvationWhereUniqueInput {
  id: ID
}

type SelfPity {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type SelfPityConnection {
  pageInfo: PageInfo!
  edges: [SelfPityEdge]!
  aggregate: AggregateSelfPity!
}

input SelfPityCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SelfPityCreateManyInput {
  create: [SelfPityCreateInput!]
  connect: [SelfPityWhereUniqueInput!]
}

type SelfPityEdge {
  node: SelfPity!
  cursor: String!
}

enum SelfPityOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type SelfPityPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SelfPityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [SelfPityScalarWhereInput!]
  OR: [SelfPityScalarWhereInput!]
  NOT: [SelfPityScalarWhereInput!]
}

type SelfPitySubscriptionPayload {
  mutation: MutationType!
  node: SelfPity
  updatedFields: [String!]
  previousValues: SelfPityPreviousValues
}

input SelfPitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SelfPityWhereInput
  AND: [SelfPitySubscriptionWhereInput!]
  OR: [SelfPitySubscriptionWhereInput!]
  NOT: [SelfPitySubscriptionWhereInput!]
}

input SelfPityUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SelfPityUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SelfPityUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SelfPityUpdateManyInput {
  create: [SelfPityCreateInput!]
  update: [SelfPityUpdateWithWhereUniqueNestedInput!]
  upsert: [SelfPityUpsertWithWhereUniqueNestedInput!]
  delete: [SelfPityWhereUniqueInput!]
  connect: [SelfPityWhereUniqueInput!]
  set: [SelfPityWhereUniqueInput!]
  disconnect: [SelfPityWhereUniqueInput!]
  deleteMany: [SelfPityScalarWhereInput!]
  updateMany: [SelfPityUpdateManyWithWhereNestedInput!]
}

input SelfPityUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SelfPityUpdateManyWithWhereNestedInput {
  where: SelfPityScalarWhereInput!
  data: SelfPityUpdateManyDataInput!
}

input SelfPityUpdateWithWhereUniqueNestedInput {
  where: SelfPityWhereUniqueInput!
  data: SelfPityUpdateDataInput!
}

input SelfPityUpsertWithWhereUniqueNestedInput {
  where: SelfPityWhereUniqueInput!
  update: SelfPityUpdateDataInput!
  create: SelfPityCreateInput!
}

input SelfPityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [SelfPityWhereInput!]
  OR: [SelfPityWhereInput!]
  NOT: [SelfPityWhereInput!]
}

input SelfPityWhereUniqueInput {
  id: ID
}

type Strength {
  id: ID!
  armor(where: ArmorWhereInput, orderBy: ArmorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Armor!]
  boundary(where: BoundaryWhereInput, orderBy: BoundaryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Boundary!]
  loyalty(where: LoyaltyWhereInput, orderBy: LoyaltyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loyalty!]
  honor(where: HonorWhereInput, orderBy: HonorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Honor!]
}

type StrengthConnection {
  pageInfo: PageInfo!
  edges: [StrengthEdge]!
  aggregate: AggregateStrength!
}

input StrengthCreateInput {
  id: ID
  armor: ArmorCreateManyInput
  boundary: BoundaryCreateManyInput
  loyalty: LoyaltyCreateManyInput
  honor: HonorCreateManyInput
}

input StrengthCreateManyInput {
  create: [StrengthCreateInput!]
  connect: [StrengthWhereUniqueInput!]
}

type StrengthEdge {
  node: Strength!
  cursor: String!
}

enum StrengthOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StrengthPreviousValues {
  id: ID!
}

input StrengthScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [StrengthScalarWhereInput!]
  OR: [StrengthScalarWhereInput!]
  NOT: [StrengthScalarWhereInput!]
}

type StrengthSubscriptionPayload {
  mutation: MutationType!
  node: Strength
  updatedFields: [String!]
  previousValues: StrengthPreviousValues
}

input StrengthSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StrengthWhereInput
  AND: [StrengthSubscriptionWhereInput!]
  OR: [StrengthSubscriptionWhereInput!]
  NOT: [StrengthSubscriptionWhereInput!]
}

input StrengthUpdateDataInput {
  armor: ArmorUpdateManyInput
  boundary: BoundaryUpdateManyInput
  loyalty: LoyaltyUpdateManyInput
  honor: HonorUpdateManyInput
}

input StrengthUpdateInput {
  armor: ArmorUpdateManyInput
  boundary: BoundaryUpdateManyInput
  loyalty: LoyaltyUpdateManyInput
  honor: HonorUpdateManyInput
}

input StrengthUpdateManyInput {
  create: [StrengthCreateInput!]
  update: [StrengthUpdateWithWhereUniqueNestedInput!]
  upsert: [StrengthUpsertWithWhereUniqueNestedInput!]
  delete: [StrengthWhereUniqueInput!]
  connect: [StrengthWhereUniqueInput!]
  set: [StrengthWhereUniqueInput!]
  disconnect: [StrengthWhereUniqueInput!]
  deleteMany: [StrengthScalarWhereInput!]
}

input StrengthUpdateWithWhereUniqueNestedInput {
  where: StrengthWhereUniqueInput!
  data: StrengthUpdateDataInput!
}

input StrengthUpsertWithWhereUniqueNestedInput {
  where: StrengthWhereUniqueInput!
  update: StrengthUpdateDataInput!
  create: StrengthCreateInput!
}

input StrengthWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  armor_every: ArmorWhereInput
  armor_some: ArmorWhereInput
  armor_none: ArmorWhereInput
  boundary_every: BoundaryWhereInput
  boundary_some: BoundaryWhereInput
  boundary_none: BoundaryWhereInput
  loyalty_every: LoyaltyWhereInput
  loyalty_some: LoyaltyWhereInput
  loyalty_none: LoyaltyWhereInput
  honor_every: HonorWhereInput
  honor_some: HonorWhereInput
  honor_none: HonorWhereInput
  AND: [StrengthWhereInput!]
  OR: [StrengthWhereInput!]
  NOT: [StrengthWhereInput!]
}

input StrengthWhereUniqueInput {
  id: ID
}

type Subscription {
  acceptance(where: AcceptanceSubscriptionWhereInput): AcceptanceSubscriptionPayload
  anger(where: AngerSubscriptionWhereInput): AngerSubscriptionPayload
  armor(where: ArmorSubscriptionWhereInput): ArmorSubscriptionPayload
  boundary(where: BoundarySubscriptionWhereInput): BoundarySubscriptionPayload
  compassion(where: CompassionSubscriptionWhereInput): CompassionSubscriptionPayload
  courage(where: CourageSubscriptionWhereInput): CourageSubscriptionPayload
  defect(where: DefectSubscriptionWhereInput): DefectSubscriptionPayload
  experience(where: ExperienceSubscriptionWhereInput): ExperienceSubscriptionPayload
  fear(where: FearSubscriptionWhereInput): FearSubscriptionPayload
  gratitude(where: GratitudeSubscriptionWhereInput): GratitudeSubscriptionPayload
  has(where: HasSubscriptionWhereInput): HasSubscriptionPayload
  higherPower(where: HigherPowerSubscriptionWhereInput): HigherPowerSubscriptionPayload
  honor(where: HonorSubscriptionWhereInput): HonorSubscriptionPayload
  hope(where: HopeSubscriptionWhereInput): HopeSubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  loyalty(where: LoyaltySubscriptionWhereInput): LoyaltySubscriptionPayload
  obsession(where: ObsessionSubscriptionWhereInput): ObsessionSubscriptionPayload
  pride(where: PrideSubscriptionWhereInput): PrideSubscriptionPayload
  resentment(where: ResentmentSubscriptionWhereInput): ResentmentSubscriptionPayload
  salvation(where: SalvationSubscriptionWhereInput): SalvationSubscriptionPayload
  selfPity(where: SelfPitySubscriptionWhereInput): SelfPitySubscriptionPayload
  strength(where: StrengthSubscriptionWhereInput): StrengthSubscriptionPayload
  suffering(where: SufferingSubscriptionWhereInput): SufferingSubscriptionPayload
  toxicity(where: ToxicitySubscriptionWhereInput): ToxicitySubscriptionPayload
  trauma(where: TraumaSubscriptionWhereInput): TraumaSubscriptionPayload
  vulnerability(where: VulnerabilitySubscriptionWhereInput): VulnerabilitySubscriptionPayload
}

type Suffering {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type SufferingConnection {
  pageInfo: PageInfo!
  edges: [SufferingEdge]!
  aggregate: AggregateSuffering!
}

input SufferingCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SufferingCreateManyInput {
  create: [SufferingCreateInput!]
  connect: [SufferingWhereUniqueInput!]
}

type SufferingEdge {
  node: Suffering!
  cursor: String!
}

enum SufferingOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type SufferingPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SufferingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [SufferingScalarWhereInput!]
  OR: [SufferingScalarWhereInput!]
  NOT: [SufferingScalarWhereInput!]
}

type SufferingSubscriptionPayload {
  mutation: MutationType!
  node: Suffering
  updatedFields: [String!]
  previousValues: SufferingPreviousValues
}

input SufferingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SufferingWhereInput
  AND: [SufferingSubscriptionWhereInput!]
  OR: [SufferingSubscriptionWhereInput!]
  NOT: [SufferingSubscriptionWhereInput!]
}

input SufferingUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SufferingUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SufferingUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SufferingUpdateManyInput {
  create: [SufferingCreateInput!]
  update: [SufferingUpdateWithWhereUniqueNestedInput!]
  upsert: [SufferingUpsertWithWhereUniqueNestedInput!]
  delete: [SufferingWhereUniqueInput!]
  connect: [SufferingWhereUniqueInput!]
  set: [SufferingWhereUniqueInput!]
  disconnect: [SufferingWhereUniqueInput!]
  deleteMany: [SufferingScalarWhereInput!]
  updateMany: [SufferingUpdateManyWithWhereNestedInput!]
}

input SufferingUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input SufferingUpdateManyWithWhereNestedInput {
  where: SufferingScalarWhereInput!
  data: SufferingUpdateManyDataInput!
}

input SufferingUpdateWithWhereUniqueNestedInput {
  where: SufferingWhereUniqueInput!
  data: SufferingUpdateDataInput!
}

input SufferingUpsertWithWhereUniqueNestedInput {
  where: SufferingWhereUniqueInput!
  update: SufferingUpdateDataInput!
  create: SufferingCreateInput!
}

input SufferingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [SufferingWhereInput!]
  OR: [SufferingWhereInput!]
  NOT: [SufferingWhereInput!]
}

input SufferingWhereUniqueInput {
  id: ID
}

type Toxicity {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type ToxicityConnection {
  pageInfo: PageInfo!
  edges: [ToxicityEdge]!
  aggregate: AggregateToxicity!
}

input ToxicityCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ToxicityCreateManyInput {
  create: [ToxicityCreateInput!]
  connect: [ToxicityWhereUniqueInput!]
}

type ToxicityEdge {
  node: Toxicity!
  cursor: String!
}

enum ToxicityOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type ToxicityPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ToxicityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [ToxicityScalarWhereInput!]
  OR: [ToxicityScalarWhereInput!]
  NOT: [ToxicityScalarWhereInput!]
}

type ToxicitySubscriptionPayload {
  mutation: MutationType!
  node: Toxicity
  updatedFields: [String!]
  previousValues: ToxicityPreviousValues
}

input ToxicitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ToxicityWhereInput
  AND: [ToxicitySubscriptionWhereInput!]
  OR: [ToxicitySubscriptionWhereInput!]
  NOT: [ToxicitySubscriptionWhereInput!]
}

input ToxicityUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ToxicityUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ToxicityUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ToxicityUpdateManyInput {
  create: [ToxicityCreateInput!]
  update: [ToxicityUpdateWithWhereUniqueNestedInput!]
  upsert: [ToxicityUpsertWithWhereUniqueNestedInput!]
  delete: [ToxicityWhereUniqueInput!]
  connect: [ToxicityWhereUniqueInput!]
  set: [ToxicityWhereUniqueInput!]
  disconnect: [ToxicityWhereUniqueInput!]
  deleteMany: [ToxicityScalarWhereInput!]
  updateMany: [ToxicityUpdateManyWithWhereNestedInput!]
}

input ToxicityUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input ToxicityUpdateManyWithWhereNestedInput {
  where: ToxicityScalarWhereInput!
  data: ToxicityUpdateManyDataInput!
}

input ToxicityUpdateWithWhereUniqueNestedInput {
  where: ToxicityWhereUniqueInput!
  data: ToxicityUpdateDataInput!
}

input ToxicityUpsertWithWhereUniqueNestedInput {
  where: ToxicityWhereUniqueInput!
  update: ToxicityUpdateDataInput!
  create: ToxicityCreateInput!
}

input ToxicityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [ToxicityWhereInput!]
  OR: [ToxicityWhereInput!]
  NOT: [ToxicityWhereInput!]
}

input ToxicityWhereUniqueInput {
  id: ID
}

type Trauma {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type TraumaConnection {
  pageInfo: PageInfo!
  edges: [TraumaEdge]!
  aggregate: AggregateTrauma!
}

input TraumaCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input TraumaCreateManyInput {
  create: [TraumaCreateInput!]
  connect: [TraumaWhereUniqueInput!]
}

type TraumaEdge {
  node: Trauma!
  cursor: String!
}

enum TraumaOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type TraumaPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input TraumaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [TraumaScalarWhereInput!]
  OR: [TraumaScalarWhereInput!]
  NOT: [TraumaScalarWhereInput!]
}

type TraumaSubscriptionPayload {
  mutation: MutationType!
  node: Trauma
  updatedFields: [String!]
  previousValues: TraumaPreviousValues
}

input TraumaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TraumaWhereInput
  AND: [TraumaSubscriptionWhereInput!]
  OR: [TraumaSubscriptionWhereInput!]
  NOT: [TraumaSubscriptionWhereInput!]
}

input TraumaUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input TraumaUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input TraumaUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input TraumaUpdateManyInput {
  create: [TraumaCreateInput!]
  update: [TraumaUpdateWithWhereUniqueNestedInput!]
  upsert: [TraumaUpsertWithWhereUniqueNestedInput!]
  delete: [TraumaWhereUniqueInput!]
  connect: [TraumaWhereUniqueInput!]
  set: [TraumaWhereUniqueInput!]
  disconnect: [TraumaWhereUniqueInput!]
  deleteMany: [TraumaScalarWhereInput!]
  updateMany: [TraumaUpdateManyWithWhereNestedInput!]
}

input TraumaUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input TraumaUpdateManyWithWhereNestedInput {
  where: TraumaScalarWhereInput!
  data: TraumaUpdateManyDataInput!
}

input TraumaUpdateWithWhereUniqueNestedInput {
  where: TraumaWhereUniqueInput!
  data: TraumaUpdateDataInput!
}

input TraumaUpsertWithWhereUniqueNestedInput {
  where: TraumaWhereUniqueInput!
  update: TraumaUpdateDataInput!
  create: TraumaCreateInput!
}

input TraumaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [TraumaWhereInput!]
  OR: [TraumaWhereInput!]
  NOT: [TraumaWhereInput!]
}

input TraumaWhereUniqueInput {
  id: ID
}

type Vulnerability {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

type VulnerabilityConnection {
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]!
  aggregate: AggregateVulnerability!
}

input VulnerabilityCreateInput {
  id: ID
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input VulnerabilityCreateManyInput {
  create: [VulnerabilityCreateInput!]
  connect: [VulnerabilityWhereUniqueInput!]
}

type VulnerabilityEdge {
  node: Vulnerability!
  cursor: String!
}

enum VulnerabilityOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  attribute_ASC
  attribute_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
}

type VulnerabilityPreviousValues {
  id: ID!
  character: String!
  thought: String!
  source: String!
  process: String!
  attribute: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input VulnerabilityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [VulnerabilityScalarWhereInput!]
  OR: [VulnerabilityScalarWhereInput!]
  NOT: [VulnerabilityScalarWhereInput!]
}

type VulnerabilitySubscriptionPayload {
  mutation: MutationType!
  node: Vulnerability
  updatedFields: [String!]
  previousValues: VulnerabilityPreviousValues
}

input VulnerabilitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VulnerabilityWhereInput
  AND: [VulnerabilitySubscriptionWhereInput!]
  OR: [VulnerabilitySubscriptionWhereInput!]
  NOT: [VulnerabilitySubscriptionWhereInput!]
}

input VulnerabilityUpdateDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input VulnerabilityUpdateInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input VulnerabilityUpdateManyDataInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input VulnerabilityUpdateManyInput {
  create: [VulnerabilityCreateInput!]
  update: [VulnerabilityUpdateWithWhereUniqueNestedInput!]
  upsert: [VulnerabilityUpsertWithWhereUniqueNestedInput!]
  delete: [VulnerabilityWhereUniqueInput!]
  connect: [VulnerabilityWhereUniqueInput!]
  set: [VulnerabilityWhereUniqueInput!]
  disconnect: [VulnerabilityWhereUniqueInput!]
  deleteMany: [VulnerabilityScalarWhereInput!]
  updateMany: [VulnerabilityUpdateManyWithWhereNestedInput!]
}

input VulnerabilityUpdateManyMutationInput {
  character: String
  thought: String
  source: String
  process: String
  attribute: String
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
}

input VulnerabilityUpdateManyWithWhereNestedInput {
  where: VulnerabilityScalarWhereInput!
  data: VulnerabilityUpdateManyDataInput!
}

input VulnerabilityUpdateWithWhereUniqueNestedInput {
  where: VulnerabilityWhereUniqueInput!
  data: VulnerabilityUpdateDataInput!
}

input VulnerabilityUpsertWithWhereUniqueNestedInput {
  where: VulnerabilityWhereUniqueInput!
  update: VulnerabilityUpdateDataInput!
  create: VulnerabilityCreateInput!
}

input VulnerabilityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: String
  character_not: String
  character_in: [String!]
  character_not_in: [String!]
  character_lt: String
  character_lte: String
  character_gt: String
  character_gte: String
  character_contains: String
  character_not_contains: String
  character_starts_with: String
  character_not_starts_with: String
  character_ends_with: String
  character_not_ends_with: String
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  process: String
  process_not: String
  process_in: [String!]
  process_not_in: [String!]
  process_lt: String
  process_lte: String
  process_gt: String
  process_gte: String
  process_contains: String
  process_not_contains: String
  process_starts_with: String
  process_not_starts_with: String
  process_ends_with: String
  process_not_ends_with: String
  attribute: String
  attribute_not: String
  attribute_in: [String!]
  attribute_not_in: [String!]
  attribute_lt: String
  attribute_lte: String
  attribute_gt: String
  attribute_gte: String
  attribute_contains: String
  attribute_not_contains: String
  attribute_starts_with: String
  attribute_not_starts_with: String
  attribute_ends_with: String
  attribute_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  AND: [VulnerabilityWhereInput!]
  OR: [VulnerabilityWhereInput!]
  NOT: [VulnerabilityWhereInput!]
}

input VulnerabilityWhereUniqueInput {
  id: ID
}
`
      }
    