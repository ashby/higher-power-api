module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAuthPayload {
  count: Int!
}

type AggregateCast {
  count: Int!
}

type AggregateCastCharacter {
  count: Int!
}

type AggregateCharacter {
  count: Int!
}

type AggregateCharacterProcess {
  count: Int!
}

type AggregateFeeling {
  count: Int!
}

type AggregateHigherPower {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateInventoryPath {
  count: Int!
}

type AggregatePath {
  count: Int!
}

type AggregatePathFeeling {
  count: Int!
}

type AggregateProcess {
  count: Int!
}

type AggregateProcessSource {
  count: Int!
}

type AggregateSource {
  count: Int!
}

type AggregateSourceFeeling {
  count: Int!
}

type AggregateThought {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String!
  userId: ID!
}

type AuthPayloadConnection {
  pageInfo: PageInfo!
  edges: [AuthPayloadEdge]!
  aggregate: AggregateAuthPayload!
}

input AuthPayloadCreateInput {
  token: String!
  userId: ID!
}

type AuthPayloadEdge {
  node: AuthPayload!
  cursor: String!
}

enum AuthPayloadOrderByInput {
  token_ASC
  token_DESC
  userId_ASC
  userId_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AuthPayloadPreviousValues {
  token: String!
  userId: ID!
}

type AuthPayloadSubscriptionPayload {
  mutation: MutationType!
  node: AuthPayload
  updatedFields: [String!]
  previousValues: AuthPayloadPreviousValues
}

input AuthPayloadSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthPayloadWhereInput
  AND: [AuthPayloadSubscriptionWhereInput!]
  OR: [AuthPayloadSubscriptionWhereInput!]
  NOT: [AuthPayloadSubscriptionWhereInput!]
}

input AuthPayloadUpdateManyMutationInput {
  token: String
  userId: ID
}

input AuthPayloadWhereInput {
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [AuthPayloadWhereInput!]
  OR: [AuthPayloadWhereInput!]
  NOT: [AuthPayloadWhereInput!]
}

type BatchPayload {
  count: Long!
}

type Cast {
  id: ID!
  characters(where: CastCharacterWhereInput, orderBy: CastCharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CastCharacter!]
}

type CastCharacter {
  id: ID!
  title: String!
  description: String
  process: CharacterProcess!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type CastCharacterConnection {
  pageInfo: PageInfo!
  edges: [CastCharacterEdge]!
  aggregate: AggregateCastCharacter!
}

input CastCharacterCreateInput {
  id: ID
  title: String!
  description: String
  process: CharacterProcessCreateOneInput!
  userId: ID!
}

input CastCharacterCreateManyInput {
  create: [CastCharacterCreateInput!]
  connect: [CastCharacterWhereUniqueInput!]
}

type CastCharacterEdge {
  node: CastCharacter!
  cursor: String!
}

enum CastCharacterOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type CastCharacterPreviousValues {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

input CastCharacterScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [CastCharacterScalarWhereInput!]
  OR: [CastCharacterScalarWhereInput!]
  NOT: [CastCharacterScalarWhereInput!]
}

type CastCharacterSubscriptionPayload {
  mutation: MutationType!
  node: CastCharacter
  updatedFields: [String!]
  previousValues: CastCharacterPreviousValues
}

input CastCharacterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CastCharacterWhereInput
  AND: [CastCharacterSubscriptionWhereInput!]
  OR: [CastCharacterSubscriptionWhereInput!]
  NOT: [CastCharacterSubscriptionWhereInput!]
}

input CastCharacterUpdateDataInput {
  title: String
  description: String
  process: CharacterProcessUpdateOneRequiredInput
  userId: ID
}

input CastCharacterUpdateInput {
  title: String
  description: String
  process: CharacterProcessUpdateOneRequiredInput
  userId: ID
}

input CastCharacterUpdateManyDataInput {
  title: String
  description: String
  userId: ID
}

input CastCharacterUpdateManyInput {
  create: [CastCharacterCreateInput!]
  update: [CastCharacterUpdateWithWhereUniqueNestedInput!]
  upsert: [CastCharacterUpsertWithWhereUniqueNestedInput!]
  delete: [CastCharacterWhereUniqueInput!]
  connect: [CastCharacterWhereUniqueInput!]
  set: [CastCharacterWhereUniqueInput!]
  disconnect: [CastCharacterWhereUniqueInput!]
  deleteMany: [CastCharacterScalarWhereInput!]
  updateMany: [CastCharacterUpdateManyWithWhereNestedInput!]
}

input CastCharacterUpdateManyMutationInput {
  title: String
  description: String
  userId: ID
}

input CastCharacterUpdateManyWithWhereNestedInput {
  where: CastCharacterScalarWhereInput!
  data: CastCharacterUpdateManyDataInput!
}

input CastCharacterUpdateWithWhereUniqueNestedInput {
  where: CastCharacterWhereUniqueInput!
  data: CastCharacterUpdateDataInput!
}

input CastCharacterUpsertWithWhereUniqueNestedInput {
  where: CastCharacterWhereUniqueInput!
  update: CastCharacterUpdateDataInput!
  create: CastCharacterCreateInput!
}

input CastCharacterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  process: CharacterProcessWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [CastCharacterWhereInput!]
  OR: [CastCharacterWhereInput!]
  NOT: [CastCharacterWhereInput!]
}

input CastCharacterWhereUniqueInput {
  id: ID
}

type CastConnection {
  pageInfo: PageInfo!
  edges: [CastEdge]!
  aggregate: AggregateCast!
}

input CastCreateInput {
  id: ID
  characters: CastCharacterCreateManyInput
}

input CastCreateOneInput {
  create: CastCreateInput
  connect: CastWhereUniqueInput
}

type CastEdge {
  node: Cast!
  cursor: String!
}

enum CastOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CastPreviousValues {
  id: ID!
}

type CastSubscriptionPayload {
  mutation: MutationType!
  node: Cast
  updatedFields: [String!]
  previousValues: CastPreviousValues
}

input CastSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CastWhereInput
  AND: [CastSubscriptionWhereInput!]
  OR: [CastSubscriptionWhereInput!]
  NOT: [CastSubscriptionWhereInput!]
}

input CastUpdateDataInput {
  characters: CastCharacterUpdateManyInput
}

input CastUpdateInput {
  characters: CastCharacterUpdateManyInput
}

input CastUpdateOneInput {
  create: CastCreateInput
  update: CastUpdateDataInput
  upsert: CastUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CastWhereUniqueInput
}

input CastUpsertNestedInput {
  update: CastUpdateDataInput!
  create: CastCreateInput!
}

input CastWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  characters_every: CastCharacterWhereInput
  characters_some: CastCharacterWhereInput
  characters_none: CastCharacterWhereInput
  AND: [CastWhereInput!]
  OR: [CastWhereInput!]
  NOT: [CastWhereInput!]
}

input CastWhereUniqueInput {
  id: ID
}

type Character {
  id: ID!
  title: String!
  description: String
  process: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type CharacterConnection {
  pageInfo: PageInfo!
  edges: [CharacterEdge]!
  aggregate: AggregateCharacter!
}

input CharacterCreateInput {
  id: ID
  title: String!
  description: String
  process: ID!
  userId: ID!
}

type CharacterEdge {
  node: Character!
  cursor: String!
}

enum CharacterOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  process_ASC
  process_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type CharacterPreviousValues {
  id: ID!
  title: String!
  description: String
  process: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type CharacterProcess {
  id: ID!
  type: String!
  title: String!
  sources(where: ProcessSourceWhereInput, orderBy: ProcessSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProcessSource!]
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type CharacterProcessConnection {
  pageInfo: PageInfo!
  edges: [CharacterProcessEdge]!
  aggregate: AggregateCharacterProcess!
}

input CharacterProcessCreateInput {
  id: ID
  type: String!
  title: String!
  sources: ProcessSourceCreateManyInput
  userId: ID!
}

input CharacterProcessCreateOneInput {
  create: CharacterProcessCreateInput
  connect: CharacterProcessWhereUniqueInput
}

type CharacterProcessEdge {
  node: CharacterProcess!
  cursor: String!
}

enum CharacterProcessOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type CharacterProcessPreviousValues {
  id: ID!
  type: String!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type CharacterProcessSubscriptionPayload {
  mutation: MutationType!
  node: CharacterProcess
  updatedFields: [String!]
  previousValues: CharacterProcessPreviousValues
}

input CharacterProcessSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharacterProcessWhereInput
  AND: [CharacterProcessSubscriptionWhereInput!]
  OR: [CharacterProcessSubscriptionWhereInput!]
  NOT: [CharacterProcessSubscriptionWhereInput!]
}

input CharacterProcessUpdateDataInput {
  type: String
  title: String
  sources: ProcessSourceUpdateManyInput
  userId: ID
}

input CharacterProcessUpdateInput {
  type: String
  title: String
  sources: ProcessSourceUpdateManyInput
  userId: ID
}

input CharacterProcessUpdateManyMutationInput {
  type: String
  title: String
  userId: ID
}

input CharacterProcessUpdateOneRequiredInput {
  create: CharacterProcessCreateInput
  update: CharacterProcessUpdateDataInput
  upsert: CharacterProcessUpsertNestedInput
  connect: CharacterProcessWhereUniqueInput
}

input CharacterProcessUpsertNestedInput {
  update: CharacterProcessUpdateDataInput!
  create: CharacterProcessCreateInput!
}

input CharacterProcessWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  sources_every: ProcessSourceWhereInput
  sources_some: ProcessSourceWhereInput
  sources_none: ProcessSourceWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [CharacterProcessWhereInput!]
  OR: [CharacterProcessWhereInput!]
  NOT: [CharacterProcessWhereInput!]
}

input CharacterProcessWhereUniqueInput {
  id: ID
}

type CharacterSubscriptionPayload {
  mutation: MutationType!
  node: Character
  updatedFields: [String!]
  previousValues: CharacterPreviousValues
}

input CharacterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharacterWhereInput
  AND: [CharacterSubscriptionWhereInput!]
  OR: [CharacterSubscriptionWhereInput!]
  NOT: [CharacterSubscriptionWhereInput!]
}

input CharacterUpdateInput {
  title: String
  description: String
  process: ID
  userId: ID
}

input CharacterUpdateManyMutationInput {
  title: String
  description: String
  process: ID
  userId: ID
}

input CharacterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  process: ID
  process_not: ID
  process_in: [ID!]
  process_not_in: [ID!]
  process_lt: ID
  process_lte: ID
  process_gt: ID
  process_gte: ID
  process_contains: ID
  process_not_contains: ID
  process_starts_with: ID
  process_not_starts_with: ID
  process_ends_with: ID
  process_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
}

input CharacterWhereUniqueInput {
  id: ID
}

scalar DateTime

type Feeling {
  id: ID!
  type: String!
  title: String!
  thoughts: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type FeelingConnection {
  pageInfo: PageInfo!
  edges: [FeelingEdge]!
  aggregate: AggregateFeeling!
}

input FeelingCreateInput {
  id: ID
  type: String!
  title: String!
  thoughts: FeelingCreatethoughtsInput
  userId: ID!
}

input FeelingCreatethoughtsInput {
  set: [ID!]
}

type FeelingEdge {
  node: Feeling!
  cursor: String!
}

enum FeelingOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type FeelingPreviousValues {
  id: ID!
  type: String!
  title: String!
  thoughts: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type FeelingSubscriptionPayload {
  mutation: MutationType!
  node: Feeling
  updatedFields: [String!]
  previousValues: FeelingPreviousValues
}

input FeelingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeelingWhereInput
  AND: [FeelingSubscriptionWhereInput!]
  OR: [FeelingSubscriptionWhereInput!]
  NOT: [FeelingSubscriptionWhereInput!]
}

input FeelingUpdateInput {
  type: String
  title: String
  thoughts: FeelingUpdatethoughtsInput
  userId: ID
}

input FeelingUpdateManyMutationInput {
  type: String
  title: String
  thoughts: FeelingUpdatethoughtsInput
  userId: ID
}

input FeelingUpdatethoughtsInput {
  set: [ID!]
}

input FeelingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [FeelingWhereInput!]
  OR: [FeelingWhereInput!]
  NOT: [FeelingWhereInput!]
}

input FeelingWhereUniqueInput {
  id: ID
}

type HigherPower {
  id: ID!
  inventory: Inventory
  cast: Cast
}

type HigherPowerConnection {
  pageInfo: PageInfo!
  edges: [HigherPowerEdge]!
  aggregate: AggregateHigherPower!
}

input HigherPowerCreateInput {
  id: ID
  inventory: InventoryCreateOneInput
  cast: CastCreateOneInput
}

type HigherPowerEdge {
  node: HigherPower!
  cursor: String!
}

enum HigherPowerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HigherPowerPreviousValues {
  id: ID!
}

type HigherPowerSubscriptionPayload {
  mutation: MutationType!
  node: HigherPower
  updatedFields: [String!]
  previousValues: HigherPowerPreviousValues
}

input HigherPowerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HigherPowerWhereInput
  AND: [HigherPowerSubscriptionWhereInput!]
  OR: [HigherPowerSubscriptionWhereInput!]
  NOT: [HigherPowerSubscriptionWhereInput!]
}

input HigherPowerUpdateInput {
  inventory: InventoryUpdateOneInput
  cast: CastUpdateOneInput
}

input HigherPowerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  inventory: InventoryWhereInput
  cast: CastWhereInput
  AND: [HigherPowerWhereInput!]
  OR: [HigherPowerWhereInput!]
  NOT: [HigherPowerWhereInput!]
}

input HigherPowerWhereUniqueInput {
  id: ID
}

type Inventory {
  id: ID!
  paths(where: InventoryPathWhereInput, orderBy: InventoryPathOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InventoryPath!]
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  id: ID
  paths: InventoryPathCreateManyInput
}

input InventoryCreateOneInput {
  create: InventoryCreateInput
  connect: InventoryWhereUniqueInput
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPath {
  id: ID!
  type: String!
  title: String!
  feelings(where: PathFeelingWhereInput, orderBy: PathFeelingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PathFeeling!]
  createdAt: DateTime
  updatedAt: DateTime
  userId: ID!
}

type InventoryPathConnection {
  pageInfo: PageInfo!
  edges: [InventoryPathEdge]!
  aggregate: AggregateInventoryPath!
}

input InventoryPathCreateInput {
  id: ID
  type: String!
  title: String!
  feelings: PathFeelingCreateManyInput
  userId: ID!
}

input InventoryPathCreateManyInput {
  create: [InventoryPathCreateInput!]
  connect: [InventoryPathWhereUniqueInput!]
}

type InventoryPathEdge {
  node: InventoryPath!
  cursor: String!
}

enum InventoryPathOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type InventoryPathPreviousValues {
  id: ID!
  type: String!
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  userId: ID!
}

input InventoryPathScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [InventoryPathScalarWhereInput!]
  OR: [InventoryPathScalarWhereInput!]
  NOT: [InventoryPathScalarWhereInput!]
}

type InventoryPathSubscriptionPayload {
  mutation: MutationType!
  node: InventoryPath
  updatedFields: [String!]
  previousValues: InventoryPathPreviousValues
}

input InventoryPathSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryPathWhereInput
  AND: [InventoryPathSubscriptionWhereInput!]
  OR: [InventoryPathSubscriptionWhereInput!]
  NOT: [InventoryPathSubscriptionWhereInput!]
}

input InventoryPathUpdateDataInput {
  type: String
  title: String
  feelings: PathFeelingUpdateManyInput
  userId: ID
}

input InventoryPathUpdateInput {
  type: String
  title: String
  feelings: PathFeelingUpdateManyInput
  userId: ID
}

input InventoryPathUpdateManyDataInput {
  type: String
  title: String
  userId: ID
}

input InventoryPathUpdateManyInput {
  create: [InventoryPathCreateInput!]
  update: [InventoryPathUpdateWithWhereUniqueNestedInput!]
  upsert: [InventoryPathUpsertWithWhereUniqueNestedInput!]
  delete: [InventoryPathWhereUniqueInput!]
  connect: [InventoryPathWhereUniqueInput!]
  set: [InventoryPathWhereUniqueInput!]
  disconnect: [InventoryPathWhereUniqueInput!]
  deleteMany: [InventoryPathScalarWhereInput!]
  updateMany: [InventoryPathUpdateManyWithWhereNestedInput!]
}

input InventoryPathUpdateManyMutationInput {
  type: String
  title: String
  userId: ID
}

input InventoryPathUpdateManyWithWhereNestedInput {
  where: InventoryPathScalarWhereInput!
  data: InventoryPathUpdateManyDataInput!
}

input InventoryPathUpdateWithWhereUniqueNestedInput {
  where: InventoryPathWhereUniqueInput!
  data: InventoryPathUpdateDataInput!
}

input InventoryPathUpsertWithWhereUniqueNestedInput {
  where: InventoryPathWhereUniqueInput!
  update: InventoryPathUpdateDataInput!
  create: InventoryPathCreateInput!
}

input InventoryPathWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  feelings_every: PathFeelingWhereInput
  feelings_some: PathFeelingWhereInput
  feelings_none: PathFeelingWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [InventoryPathWhereInput!]
  OR: [InventoryPathWhereInput!]
  NOT: [InventoryPathWhereInput!]
}

input InventoryPathWhereUniqueInput {
  id: ID
}

type InventoryPreviousValues {
  id: ID!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateDataInput {
  paths: InventoryPathUpdateManyInput
}

input InventoryUpdateInput {
  paths: InventoryPathUpdateManyInput
}

input InventoryUpdateOneInput {
  create: InventoryCreateInput
  update: InventoryUpdateDataInput
  upsert: InventoryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: InventoryWhereUniqueInput
}

input InventoryUpsertNestedInput {
  update: InventoryUpdateDataInput!
  create: InventoryCreateInput!
}

input InventoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  paths_every: InventoryPathWhereInput
  paths_some: InventoryPathWhereInput
  paths_none: InventoryPathWhereInput
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

input InventoryWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAuthPayload(data: AuthPayloadCreateInput!): AuthPayload!
  updateManyAuthPayloads(data: AuthPayloadUpdateManyMutationInput!, where: AuthPayloadWhereInput): BatchPayload!
  deleteManyAuthPayloads(where: AuthPayloadWhereInput): BatchPayload!
  createCast(data: CastCreateInput!): Cast!
  updateCast(data: CastUpdateInput!, where: CastWhereUniqueInput!): Cast
  upsertCast(where: CastWhereUniqueInput!, create: CastCreateInput!, update: CastUpdateInput!): Cast!
  deleteCast(where: CastWhereUniqueInput!): Cast
  deleteManyCasts(where: CastWhereInput): BatchPayload!
  createCastCharacter(data: CastCharacterCreateInput!): CastCharacter!
  updateCastCharacter(data: CastCharacterUpdateInput!, where: CastCharacterWhereUniqueInput!): CastCharacter
  updateManyCastCharacters(data: CastCharacterUpdateManyMutationInput!, where: CastCharacterWhereInput): BatchPayload!
  upsertCastCharacter(where: CastCharacterWhereUniqueInput!, create: CastCharacterCreateInput!, update: CastCharacterUpdateInput!): CastCharacter!
  deleteCastCharacter(where: CastCharacterWhereUniqueInput!): CastCharacter
  deleteManyCastCharacters(where: CastCharacterWhereInput): BatchPayload!
  createCharacter(data: CharacterCreateInput!): Character!
  updateCharacter(data: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character
  updateManyCharacters(data: CharacterUpdateManyMutationInput!, where: CharacterWhereInput): BatchPayload!
  upsertCharacter(where: CharacterWhereUniqueInput!, create: CharacterCreateInput!, update: CharacterUpdateInput!): Character!
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteManyCharacters(where: CharacterWhereInput): BatchPayload!
  createCharacterProcess(data: CharacterProcessCreateInput!): CharacterProcess!
  updateCharacterProcess(data: CharacterProcessUpdateInput!, where: CharacterProcessWhereUniqueInput!): CharacterProcess
  updateManyCharacterProcesses(data: CharacterProcessUpdateManyMutationInput!, where: CharacterProcessWhereInput): BatchPayload!
  upsertCharacterProcess(where: CharacterProcessWhereUniqueInput!, create: CharacterProcessCreateInput!, update: CharacterProcessUpdateInput!): CharacterProcess!
  deleteCharacterProcess(where: CharacterProcessWhereUniqueInput!): CharacterProcess
  deleteManyCharacterProcesses(where: CharacterProcessWhereInput): BatchPayload!
  createFeeling(data: FeelingCreateInput!): Feeling!
  updateFeeling(data: FeelingUpdateInput!, where: FeelingWhereUniqueInput!): Feeling
  updateManyFeelings(data: FeelingUpdateManyMutationInput!, where: FeelingWhereInput): BatchPayload!
  upsertFeeling(where: FeelingWhereUniqueInput!, create: FeelingCreateInput!, update: FeelingUpdateInput!): Feeling!
  deleteFeeling(where: FeelingWhereUniqueInput!): Feeling
  deleteManyFeelings(where: FeelingWhereInput): BatchPayload!
  createHigherPower(data: HigherPowerCreateInput!): HigherPower!
  updateHigherPower(data: HigherPowerUpdateInput!, where: HigherPowerWhereUniqueInput!): HigherPower
  upsertHigherPower(where: HigherPowerWhereUniqueInput!, create: HigherPowerCreateInput!, update: HigherPowerUpdateInput!): HigherPower!
  deleteHigherPower(where: HigherPowerWhereUniqueInput!): HigherPower
  deleteManyHigherPowers(where: HigherPowerWhereInput): BatchPayload!
  createInventory(data: InventoryCreateInput!): Inventory!
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  upsertInventory(where: InventoryWhereUniqueInput!, create: InventoryCreateInput!, update: InventoryUpdateInput!): Inventory!
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createInventoryPath(data: InventoryPathCreateInput!): InventoryPath!
  updateInventoryPath(data: InventoryPathUpdateInput!, where: InventoryPathWhereUniqueInput!): InventoryPath
  updateManyInventoryPaths(data: InventoryPathUpdateManyMutationInput!, where: InventoryPathWhereInput): BatchPayload!
  upsertInventoryPath(where: InventoryPathWhereUniqueInput!, create: InventoryPathCreateInput!, update: InventoryPathUpdateInput!): InventoryPath!
  deleteInventoryPath(where: InventoryPathWhereUniqueInput!): InventoryPath
  deleteManyInventoryPaths(where: InventoryPathWhereInput): BatchPayload!
  createPath(data: PathCreateInput!): Path!
  updatePath(data: PathUpdateInput!, where: PathWhereUniqueInput!): Path
  updateManyPaths(data: PathUpdateManyMutationInput!, where: PathWhereInput): BatchPayload!
  upsertPath(where: PathWhereUniqueInput!, create: PathCreateInput!, update: PathUpdateInput!): Path!
  deletePath(where: PathWhereUniqueInput!): Path
  deleteManyPaths(where: PathWhereInput): BatchPayload!
  createPathFeeling(data: PathFeelingCreateInput!): PathFeeling!
  updatePathFeeling(data: PathFeelingUpdateInput!, where: PathFeelingWhereUniqueInput!): PathFeeling
  updateManyPathFeelings(data: PathFeelingUpdateManyMutationInput!, where: PathFeelingWhereInput): BatchPayload!
  upsertPathFeeling(where: PathFeelingWhereUniqueInput!, create: PathFeelingCreateInput!, update: PathFeelingUpdateInput!): PathFeeling!
  deletePathFeeling(where: PathFeelingWhereUniqueInput!): PathFeeling
  deleteManyPathFeelings(where: PathFeelingWhereInput): BatchPayload!
  createProcess(data: ProcessCreateInput!): Process!
  updateProcess(data: ProcessUpdateInput!, where: ProcessWhereUniqueInput!): Process
  updateManyProcesses(data: ProcessUpdateManyMutationInput!, where: ProcessWhereInput): BatchPayload!
  upsertProcess(where: ProcessWhereUniqueInput!, create: ProcessCreateInput!, update: ProcessUpdateInput!): Process!
  deleteProcess(where: ProcessWhereUniqueInput!): Process
  deleteManyProcesses(where: ProcessWhereInput): BatchPayload!
  createProcessSource(data: ProcessSourceCreateInput!): ProcessSource!
  updateProcessSource(data: ProcessSourceUpdateInput!, where: ProcessSourceWhereUniqueInput!): ProcessSource
  updateManyProcessSources(data: ProcessSourceUpdateManyMutationInput!, where: ProcessSourceWhereInput): BatchPayload!
  upsertProcessSource(where: ProcessSourceWhereUniqueInput!, create: ProcessSourceCreateInput!, update: ProcessSourceUpdateInput!): ProcessSource!
  deleteProcessSource(where: ProcessSourceWhereUniqueInput!): ProcessSource
  deleteManyProcessSources(where: ProcessSourceWhereInput): BatchPayload!
  createSource(data: SourceCreateInput!): Source!
  updateSource(data: SourceUpdateInput!, where: SourceWhereUniqueInput!): Source
  updateManySources(data: SourceUpdateManyMutationInput!, where: SourceWhereInput): BatchPayload!
  upsertSource(where: SourceWhereUniqueInput!, create: SourceCreateInput!, update: SourceUpdateInput!): Source!
  deleteSource(where: SourceWhereUniqueInput!): Source
  deleteManySources(where: SourceWhereInput): BatchPayload!
  createSourceFeeling(data: SourceFeelingCreateInput!): SourceFeeling!
  updateSourceFeeling(data: SourceFeelingUpdateInput!, where: SourceFeelingWhereUniqueInput!): SourceFeeling
  updateManySourceFeelings(data: SourceFeelingUpdateManyMutationInput!, where: SourceFeelingWhereInput): BatchPayload!
  upsertSourceFeeling(where: SourceFeelingWhereUniqueInput!, create: SourceFeelingCreateInput!, update: SourceFeelingUpdateInput!): SourceFeeling!
  deleteSourceFeeling(where: SourceFeelingWhereUniqueInput!): SourceFeeling
  deleteManySourceFeelings(where: SourceFeelingWhereInput): BatchPayload!
  createThought(data: ThoughtCreateInput!): Thought!
  updateThought(data: ThoughtUpdateInput!, where: ThoughtWhereUniqueInput!): Thought
  updateManyThoughts(data: ThoughtUpdateManyMutationInput!, where: ThoughtWhereInput): BatchPayload!
  upsertThought(where: ThoughtWhereUniqueInput!, create: ThoughtCreateInput!, update: ThoughtUpdateInput!): Thought!
  deleteThought(where: ThoughtWhereUniqueInput!): Thought
  deleteManyThoughts(where: ThoughtWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Path {
  id: ID!
  type: String!
  title: String!
  feelings: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type PathConnection {
  pageInfo: PageInfo!
  edges: [PathEdge]!
  aggregate: AggregatePath!
}

input PathCreatefeelingsInput {
  set: [ID!]
}

input PathCreateInput {
  id: ID
  type: String!
  title: String!
  feelings: PathCreatefeelingsInput
  userId: ID!
}

type PathEdge {
  node: Path!
  cursor: String!
}

type PathFeeling {
  id: ID!
  type: String!
  title: String!
  thoughts(where: ThoughtWhereInput, orderBy: ThoughtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thought!]
  createdAt: DateTime
  updatedAt: DateTime
  userId: ID!
}

type PathFeelingConnection {
  pageInfo: PageInfo!
  edges: [PathFeelingEdge]!
  aggregate: AggregatePathFeeling!
}

input PathFeelingCreateInput {
  id: ID
  type: String!
  title: String!
  thoughts: ThoughtCreateManyInput
  userId: ID!
}

input PathFeelingCreateManyInput {
  create: [PathFeelingCreateInput!]
  connect: [PathFeelingWhereUniqueInput!]
}

type PathFeelingEdge {
  node: PathFeeling!
  cursor: String!
}

enum PathFeelingOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type PathFeelingPreviousValues {
  id: ID!
  type: String!
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  userId: ID!
}

input PathFeelingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [PathFeelingScalarWhereInput!]
  OR: [PathFeelingScalarWhereInput!]
  NOT: [PathFeelingScalarWhereInput!]
}

type PathFeelingSubscriptionPayload {
  mutation: MutationType!
  node: PathFeeling
  updatedFields: [String!]
  previousValues: PathFeelingPreviousValues
}

input PathFeelingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PathFeelingWhereInput
  AND: [PathFeelingSubscriptionWhereInput!]
  OR: [PathFeelingSubscriptionWhereInput!]
  NOT: [PathFeelingSubscriptionWhereInput!]
}

input PathFeelingUpdateDataInput {
  type: String
  title: String
  thoughts: ThoughtUpdateManyInput
  userId: ID
}

input PathFeelingUpdateInput {
  type: String
  title: String
  thoughts: ThoughtUpdateManyInput
  userId: ID
}

input PathFeelingUpdateManyDataInput {
  type: String
  title: String
  userId: ID
}

input PathFeelingUpdateManyInput {
  create: [PathFeelingCreateInput!]
  update: [PathFeelingUpdateWithWhereUniqueNestedInput!]
  upsert: [PathFeelingUpsertWithWhereUniqueNestedInput!]
  delete: [PathFeelingWhereUniqueInput!]
  connect: [PathFeelingWhereUniqueInput!]
  set: [PathFeelingWhereUniqueInput!]
  disconnect: [PathFeelingWhereUniqueInput!]
  deleteMany: [PathFeelingScalarWhereInput!]
  updateMany: [PathFeelingUpdateManyWithWhereNestedInput!]
}

input PathFeelingUpdateManyMutationInput {
  type: String
  title: String
  userId: ID
}

input PathFeelingUpdateManyWithWhereNestedInput {
  where: PathFeelingScalarWhereInput!
  data: PathFeelingUpdateManyDataInput!
}

input PathFeelingUpdateWithWhereUniqueNestedInput {
  where: PathFeelingWhereUniqueInput!
  data: PathFeelingUpdateDataInput!
}

input PathFeelingUpsertWithWhereUniqueNestedInput {
  where: PathFeelingWhereUniqueInput!
  update: PathFeelingUpdateDataInput!
  create: PathFeelingCreateInput!
}

input PathFeelingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  thoughts_every: ThoughtWhereInput
  thoughts_some: ThoughtWhereInput
  thoughts_none: ThoughtWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [PathFeelingWhereInput!]
  OR: [PathFeelingWhereInput!]
  NOT: [PathFeelingWhereInput!]
}

input PathFeelingWhereUniqueInput {
  id: ID
}

enum PathOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type PathPreviousValues {
  id: ID!
  type: String!
  title: String!
  feelings: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type PathSubscriptionPayload {
  mutation: MutationType!
  node: Path
  updatedFields: [String!]
  previousValues: PathPreviousValues
}

input PathSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PathWhereInput
  AND: [PathSubscriptionWhereInput!]
  OR: [PathSubscriptionWhereInput!]
  NOT: [PathSubscriptionWhereInput!]
}

input PathUpdatefeelingsInput {
  set: [ID!]
}

input PathUpdateInput {
  type: String
  title: String
  feelings: PathUpdatefeelingsInput
  userId: ID
}

input PathUpdateManyMutationInput {
  type: String
  title: String
  feelings: PathUpdatefeelingsInput
  userId: ID
}

input PathWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [PathWhereInput!]
  OR: [PathWhereInput!]
  NOT: [PathWhereInput!]
}

input PathWhereUniqueInput {
  id: ID
}

type Process {
  id: ID!
  type: String!
  title: String!
  sources: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type ProcessConnection {
  pageInfo: PageInfo!
  edges: [ProcessEdge]!
  aggregate: AggregateProcess!
}

input ProcessCreateInput {
  id: ID
  type: String!
  title: String!
  sources: ProcessCreatesourcesInput
  userId: ID!
}

input ProcessCreatesourcesInput {
  set: [ID!]
}

type ProcessEdge {
  node: Process!
  cursor: String!
}

enum ProcessOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type ProcessPreviousValues {
  id: ID!
  type: String!
  title: String!
  sources: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type ProcessSource {
  id: ID!
  type: String!
  title: String!
  feelings(where: SourceFeelingWhereInput, orderBy: SourceFeelingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SourceFeeling!]
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type ProcessSourceConnection {
  pageInfo: PageInfo!
  edges: [ProcessSourceEdge]!
  aggregate: AggregateProcessSource!
}

input ProcessSourceCreateInput {
  id: ID
  type: String!
  title: String!
  feelings: SourceFeelingCreateManyInput
  userId: ID!
}

input ProcessSourceCreateManyInput {
  create: [ProcessSourceCreateInput!]
  connect: [ProcessSourceWhereUniqueInput!]
}

type ProcessSourceEdge {
  node: ProcessSource!
  cursor: String!
}

enum ProcessSourceOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type ProcessSourcePreviousValues {
  id: ID!
  type: String!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

input ProcessSourceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [ProcessSourceScalarWhereInput!]
  OR: [ProcessSourceScalarWhereInput!]
  NOT: [ProcessSourceScalarWhereInput!]
}

type ProcessSourceSubscriptionPayload {
  mutation: MutationType!
  node: ProcessSource
  updatedFields: [String!]
  previousValues: ProcessSourcePreviousValues
}

input ProcessSourceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProcessSourceWhereInput
  AND: [ProcessSourceSubscriptionWhereInput!]
  OR: [ProcessSourceSubscriptionWhereInput!]
  NOT: [ProcessSourceSubscriptionWhereInput!]
}

input ProcessSourceUpdateDataInput {
  type: String
  title: String
  feelings: SourceFeelingUpdateManyInput
  userId: ID
}

input ProcessSourceUpdateInput {
  type: String
  title: String
  feelings: SourceFeelingUpdateManyInput
  userId: ID
}

input ProcessSourceUpdateManyDataInput {
  type: String
  title: String
  userId: ID
}

input ProcessSourceUpdateManyInput {
  create: [ProcessSourceCreateInput!]
  update: [ProcessSourceUpdateWithWhereUniqueNestedInput!]
  upsert: [ProcessSourceUpsertWithWhereUniqueNestedInput!]
  delete: [ProcessSourceWhereUniqueInput!]
  connect: [ProcessSourceWhereUniqueInput!]
  set: [ProcessSourceWhereUniqueInput!]
  disconnect: [ProcessSourceWhereUniqueInput!]
  deleteMany: [ProcessSourceScalarWhereInput!]
  updateMany: [ProcessSourceUpdateManyWithWhereNestedInput!]
}

input ProcessSourceUpdateManyMutationInput {
  type: String
  title: String
  userId: ID
}

input ProcessSourceUpdateManyWithWhereNestedInput {
  where: ProcessSourceScalarWhereInput!
  data: ProcessSourceUpdateManyDataInput!
}

input ProcessSourceUpdateWithWhereUniqueNestedInput {
  where: ProcessSourceWhereUniqueInput!
  data: ProcessSourceUpdateDataInput!
}

input ProcessSourceUpsertWithWhereUniqueNestedInput {
  where: ProcessSourceWhereUniqueInput!
  update: ProcessSourceUpdateDataInput!
  create: ProcessSourceCreateInput!
}

input ProcessSourceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  feelings_every: SourceFeelingWhereInput
  feelings_some: SourceFeelingWhereInput
  feelings_none: SourceFeelingWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [ProcessSourceWhereInput!]
  OR: [ProcessSourceWhereInput!]
  NOT: [ProcessSourceWhereInput!]
}

input ProcessSourceWhereUniqueInput {
  id: ID
}

type ProcessSubscriptionPayload {
  mutation: MutationType!
  node: Process
  updatedFields: [String!]
  previousValues: ProcessPreviousValues
}

input ProcessSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProcessWhereInput
  AND: [ProcessSubscriptionWhereInput!]
  OR: [ProcessSubscriptionWhereInput!]
  NOT: [ProcessSubscriptionWhereInput!]
}

input ProcessUpdateInput {
  type: String
  title: String
  sources: ProcessUpdatesourcesInput
  userId: ID
}

input ProcessUpdateManyMutationInput {
  type: String
  title: String
  sources: ProcessUpdatesourcesInput
  userId: ID
}

input ProcessUpdatesourcesInput {
  set: [ID!]
}

input ProcessWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [ProcessWhereInput!]
  OR: [ProcessWhereInput!]
  NOT: [ProcessWhereInput!]
}

input ProcessWhereUniqueInput {
  id: ID
}

type Query {
  authPayloads(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthPayload]!
  authPayloadsConnection(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthPayloadConnection!
  cast(where: CastWhereUniqueInput!): Cast
  casts(where: CastWhereInput, orderBy: CastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cast]!
  castsConnection(where: CastWhereInput, orderBy: CastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CastConnection!
  castCharacter(where: CastCharacterWhereUniqueInput!): CastCharacter
  castCharacters(where: CastCharacterWhereInput, orderBy: CastCharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CastCharacter]!
  castCharactersConnection(where: CastCharacterWhereInput, orderBy: CastCharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CastCharacterConnection!
  character(where: CharacterWhereUniqueInput!): Character
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character]!
  charactersConnection(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacterConnection!
  characterProcess(where: CharacterProcessWhereUniqueInput!): CharacterProcess
  characterProcesses(where: CharacterProcessWhereInput, orderBy: CharacterProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CharacterProcess]!
  characterProcessesConnection(where: CharacterProcessWhereInput, orderBy: CharacterProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacterProcessConnection!
  feeling(where: FeelingWhereUniqueInput!): Feeling
  feelings(where: FeelingWhereInput, orderBy: FeelingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feeling]!
  feelingsConnection(where: FeelingWhereInput, orderBy: FeelingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeelingConnection!
  higherPower(where: HigherPowerWhereUniqueInput!): HigherPower
  higherPowers(where: HigherPowerWhereInput, orderBy: HigherPowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HigherPower]!
  higherPowersConnection(where: HigherPowerWhereInput, orderBy: HigherPowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HigherPowerConnection!
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  inventoryPath(where: InventoryPathWhereUniqueInput!): InventoryPath
  inventoryPaths(where: InventoryPathWhereInput, orderBy: InventoryPathOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InventoryPath]!
  inventoryPathsConnection(where: InventoryPathWhereInput, orderBy: InventoryPathOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryPathConnection!
  path(where: PathWhereUniqueInput!): Path
  paths(where: PathWhereInput, orderBy: PathOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Path]!
  pathsConnection(where: PathWhereInput, orderBy: PathOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PathConnection!
  pathFeeling(where: PathFeelingWhereUniqueInput!): PathFeeling
  pathFeelings(where: PathFeelingWhereInput, orderBy: PathFeelingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PathFeeling]!
  pathFeelingsConnection(where: PathFeelingWhereInput, orderBy: PathFeelingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PathFeelingConnection!
  process(where: ProcessWhereUniqueInput!): Process
  processes(where: ProcessWhereInput, orderBy: ProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Process]!
  processesConnection(where: ProcessWhereInput, orderBy: ProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProcessConnection!
  processSource(where: ProcessSourceWhereUniqueInput!): ProcessSource
  processSources(where: ProcessSourceWhereInput, orderBy: ProcessSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProcessSource]!
  processSourcesConnection(where: ProcessSourceWhereInput, orderBy: ProcessSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProcessSourceConnection!
  source(where: SourceWhereUniqueInput!): Source
  sources(where: SourceWhereInput, orderBy: SourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Source]!
  sourcesConnection(where: SourceWhereInput, orderBy: SourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SourceConnection!
  sourceFeeling(where: SourceFeelingWhereUniqueInput!): SourceFeeling
  sourceFeelings(where: SourceFeelingWhereInput, orderBy: SourceFeelingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SourceFeeling]!
  sourceFeelingsConnection(where: SourceFeelingWhereInput, orderBy: SourceFeelingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SourceFeelingConnection!
  thought(where: ThoughtWhereUniqueInput!): Thought
  thoughts(where: ThoughtWhereInput, orderBy: ThoughtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thought]!
  thoughtsConnection(where: ThoughtWhereInput, orderBy: ThoughtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThoughtConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Source {
  id: ID!
  type: String!
  title: String!
  feelings: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type SourceConnection {
  pageInfo: PageInfo!
  edges: [SourceEdge]!
  aggregate: AggregateSource!
}

input SourceCreatefeelingsInput {
  set: [ID!]
}

input SourceCreateInput {
  id: ID
  type: String!
  title: String!
  feelings: SourceCreatefeelingsInput
  userId: ID!
}

type SourceEdge {
  node: Source!
  cursor: String!
}

type SourceFeeling {
  id: ID!
  type: String!
  title: String!
  thoughts(where: ThoughtWhereInput, orderBy: ThoughtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thought!]
  createdAt: DateTime
  updatedAt: DateTime
  userId: ID!
}

type SourceFeelingConnection {
  pageInfo: PageInfo!
  edges: [SourceFeelingEdge]!
  aggregate: AggregateSourceFeeling!
}

input SourceFeelingCreateInput {
  id: ID
  type: String!
  title: String!
  thoughts: ThoughtCreateManyInput
  userId: ID!
}

input SourceFeelingCreateManyInput {
  create: [SourceFeelingCreateInput!]
  connect: [SourceFeelingWhereUniqueInput!]
}

type SourceFeelingEdge {
  node: SourceFeeling!
  cursor: String!
}

enum SourceFeelingOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type SourceFeelingPreviousValues {
  id: ID!
  type: String!
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  userId: ID!
}

input SourceFeelingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [SourceFeelingScalarWhereInput!]
  OR: [SourceFeelingScalarWhereInput!]
  NOT: [SourceFeelingScalarWhereInput!]
}

type SourceFeelingSubscriptionPayload {
  mutation: MutationType!
  node: SourceFeeling
  updatedFields: [String!]
  previousValues: SourceFeelingPreviousValues
}

input SourceFeelingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SourceFeelingWhereInput
  AND: [SourceFeelingSubscriptionWhereInput!]
  OR: [SourceFeelingSubscriptionWhereInput!]
  NOT: [SourceFeelingSubscriptionWhereInput!]
}

input SourceFeelingUpdateDataInput {
  type: String
  title: String
  thoughts: ThoughtUpdateManyInput
  userId: ID
}

input SourceFeelingUpdateInput {
  type: String
  title: String
  thoughts: ThoughtUpdateManyInput
  userId: ID
}

input SourceFeelingUpdateManyDataInput {
  type: String
  title: String
  userId: ID
}

input SourceFeelingUpdateManyInput {
  create: [SourceFeelingCreateInput!]
  update: [SourceFeelingUpdateWithWhereUniqueNestedInput!]
  upsert: [SourceFeelingUpsertWithWhereUniqueNestedInput!]
  delete: [SourceFeelingWhereUniqueInput!]
  connect: [SourceFeelingWhereUniqueInput!]
  set: [SourceFeelingWhereUniqueInput!]
  disconnect: [SourceFeelingWhereUniqueInput!]
  deleteMany: [SourceFeelingScalarWhereInput!]
  updateMany: [SourceFeelingUpdateManyWithWhereNestedInput!]
}

input SourceFeelingUpdateManyMutationInput {
  type: String
  title: String
  userId: ID
}

input SourceFeelingUpdateManyWithWhereNestedInput {
  where: SourceFeelingScalarWhereInput!
  data: SourceFeelingUpdateManyDataInput!
}

input SourceFeelingUpdateWithWhereUniqueNestedInput {
  where: SourceFeelingWhereUniqueInput!
  data: SourceFeelingUpdateDataInput!
}

input SourceFeelingUpsertWithWhereUniqueNestedInput {
  where: SourceFeelingWhereUniqueInput!
  update: SourceFeelingUpdateDataInput!
  create: SourceFeelingCreateInput!
}

input SourceFeelingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  thoughts_every: ThoughtWhereInput
  thoughts_some: ThoughtWhereInput
  thoughts_none: ThoughtWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [SourceFeelingWhereInput!]
  OR: [SourceFeelingWhereInput!]
  NOT: [SourceFeelingWhereInput!]
}

input SourceFeelingWhereUniqueInput {
  id: ID
}

enum SourceOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type SourcePreviousValues {
  id: ID!
  type: String!
  title: String!
  feelings: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type SourceSubscriptionPayload {
  mutation: MutationType!
  node: Source
  updatedFields: [String!]
  previousValues: SourcePreviousValues
}

input SourceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SourceWhereInput
  AND: [SourceSubscriptionWhereInput!]
  OR: [SourceSubscriptionWhereInput!]
  NOT: [SourceSubscriptionWhereInput!]
}

input SourceUpdatefeelingsInput {
  set: [ID!]
}

input SourceUpdateInput {
  type: String
  title: String
  feelings: SourceUpdatefeelingsInput
  userId: ID
}

input SourceUpdateManyMutationInput {
  type: String
  title: String
  feelings: SourceUpdatefeelingsInput
  userId: ID
}

input SourceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [SourceWhereInput!]
  OR: [SourceWhereInput!]
  NOT: [SourceWhereInput!]
}

input SourceWhereUniqueInput {
  id: ID
}

type Subscription {
  authPayload(where: AuthPayloadSubscriptionWhereInput): AuthPayloadSubscriptionPayload
  cast(where: CastSubscriptionWhereInput): CastSubscriptionPayload
  castCharacter(where: CastCharacterSubscriptionWhereInput): CastCharacterSubscriptionPayload
  character(where: CharacterSubscriptionWhereInput): CharacterSubscriptionPayload
  characterProcess(where: CharacterProcessSubscriptionWhereInput): CharacterProcessSubscriptionPayload
  feeling(where: FeelingSubscriptionWhereInput): FeelingSubscriptionPayload
  higherPower(where: HigherPowerSubscriptionWhereInput): HigherPowerSubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  inventoryPath(where: InventoryPathSubscriptionWhereInput): InventoryPathSubscriptionPayload
  path(where: PathSubscriptionWhereInput): PathSubscriptionPayload
  pathFeeling(where: PathFeelingSubscriptionWhereInput): PathFeelingSubscriptionPayload
  process(where: ProcessSubscriptionWhereInput): ProcessSubscriptionPayload
  processSource(where: ProcessSourceSubscriptionWhereInput): ProcessSourceSubscriptionPayload
  source(where: SourceSubscriptionWhereInput): SourceSubscriptionPayload
  sourceFeeling(where: SourceFeelingSubscriptionWhereInput): SourceFeelingSubscriptionPayload
  thought(where: ThoughtSubscriptionWhereInput): ThoughtSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Thought {
  id: ID!
  character: ID
  thought: String!
  quality: Boolean
  source: ID
  process: ID
  path: ID
  feeling: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  prayedAt: DateTime
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
  userId: ID!
}

type ThoughtConnection {
  pageInfo: PageInfo!
  edges: [ThoughtEdge]!
  aggregate: AggregateThought!
}

input ThoughtCreateInput {
  id: ID
  character: ID
  thought: String!
  quality: Boolean
  source: ID
  process: ID
  path: ID
  feeling: ID!
  prayedAt: DateTime
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
  userId: ID!
}

input ThoughtCreateManyInput {
  create: [ThoughtCreateInput!]
  connect: [ThoughtWhereUniqueInput!]
}

type ThoughtEdge {
  node: Thought!
  cursor: String!
}

enum ThoughtOrderByInput {
  id_ASC
  id_DESC
  character_ASC
  character_DESC
  thought_ASC
  thought_DESC
  quality_ASC
  quality_DESC
  source_ASC
  source_DESC
  process_ASC
  process_DESC
  path_ASC
  path_DESC
  feeling_ASC
  feeling_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  prayedAt_ASC
  prayedAt_DESC
  sharedAt_ASC
  sharedAt_DESC
  amendedAt_ASC
  amendedAt_DESC
  resolvedAt_ASC
  resolvedAt_DESC
  userId_ASC
  userId_DESC
}

type ThoughtPreviousValues {
  id: ID!
  character: ID
  thought: String!
  quality: Boolean
  source: ID
  process: ID
  path: ID
  feeling: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  prayedAt: DateTime
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
  userId: ID!
}

input ThoughtScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: ID
  character_not: ID
  character_in: [ID!]
  character_not_in: [ID!]
  character_lt: ID
  character_lte: ID
  character_gt: ID
  character_gte: ID
  character_contains: ID
  character_not_contains: ID
  character_starts_with: ID
  character_not_starts_with: ID
  character_ends_with: ID
  character_not_ends_with: ID
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  quality: Boolean
  quality_not: Boolean
  source: ID
  source_not: ID
  source_in: [ID!]
  source_not_in: [ID!]
  source_lt: ID
  source_lte: ID
  source_gt: ID
  source_gte: ID
  source_contains: ID
  source_not_contains: ID
  source_starts_with: ID
  source_not_starts_with: ID
  source_ends_with: ID
  source_not_ends_with: ID
  process: ID
  process_not: ID
  process_in: [ID!]
  process_not_in: [ID!]
  process_lt: ID
  process_lte: ID
  process_gt: ID
  process_gte: ID
  process_contains: ID
  process_not_contains: ID
  process_starts_with: ID
  process_not_starts_with: ID
  process_ends_with: ID
  process_not_ends_with: ID
  path: ID
  path_not: ID
  path_in: [ID!]
  path_not_in: [ID!]
  path_lt: ID
  path_lte: ID
  path_gt: ID
  path_gte: ID
  path_contains: ID
  path_not_contains: ID
  path_starts_with: ID
  path_not_starts_with: ID
  path_ends_with: ID
  path_not_ends_with: ID
  feeling: ID
  feeling_not: ID
  feeling_in: [ID!]
  feeling_not_in: [ID!]
  feeling_lt: ID
  feeling_lte: ID
  feeling_gt: ID
  feeling_gte: ID
  feeling_contains: ID
  feeling_not_contains: ID
  feeling_starts_with: ID
  feeling_not_starts_with: ID
  feeling_ends_with: ID
  feeling_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  prayedAt: DateTime
  prayedAt_not: DateTime
  prayedAt_in: [DateTime!]
  prayedAt_not_in: [DateTime!]
  prayedAt_lt: DateTime
  prayedAt_lte: DateTime
  prayedAt_gt: DateTime
  prayedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [ThoughtScalarWhereInput!]
  OR: [ThoughtScalarWhereInput!]
  NOT: [ThoughtScalarWhereInput!]
}

type ThoughtSubscriptionPayload {
  mutation: MutationType!
  node: Thought
  updatedFields: [String!]
  previousValues: ThoughtPreviousValues
}

input ThoughtSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThoughtWhereInput
  AND: [ThoughtSubscriptionWhereInput!]
  OR: [ThoughtSubscriptionWhereInput!]
  NOT: [ThoughtSubscriptionWhereInput!]
}

input ThoughtUpdateDataInput {
  character: ID
  thought: String
  quality: Boolean
  source: ID
  process: ID
  path: ID
  feeling: ID
  prayedAt: DateTime
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
  userId: ID
}

input ThoughtUpdateInput {
  character: ID
  thought: String
  quality: Boolean
  source: ID
  process: ID
  path: ID
  feeling: ID
  prayedAt: DateTime
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
  userId: ID
}

input ThoughtUpdateManyDataInput {
  character: ID
  thought: String
  quality: Boolean
  source: ID
  process: ID
  path: ID
  feeling: ID
  prayedAt: DateTime
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
  userId: ID
}

input ThoughtUpdateManyInput {
  create: [ThoughtCreateInput!]
  update: [ThoughtUpdateWithWhereUniqueNestedInput!]
  upsert: [ThoughtUpsertWithWhereUniqueNestedInput!]
  delete: [ThoughtWhereUniqueInput!]
  connect: [ThoughtWhereUniqueInput!]
  set: [ThoughtWhereUniqueInput!]
  disconnect: [ThoughtWhereUniqueInput!]
  deleteMany: [ThoughtScalarWhereInput!]
  updateMany: [ThoughtUpdateManyWithWhereNestedInput!]
}

input ThoughtUpdateManyMutationInput {
  character: ID
  thought: String
  quality: Boolean
  source: ID
  process: ID
  path: ID
  feeling: ID
  prayedAt: DateTime
  sharedAt: DateTime
  amendedAt: DateTime
  resolvedAt: DateTime
  userId: ID
}

input ThoughtUpdateManyWithWhereNestedInput {
  where: ThoughtScalarWhereInput!
  data: ThoughtUpdateManyDataInput!
}

input ThoughtUpdateWithWhereUniqueNestedInput {
  where: ThoughtWhereUniqueInput!
  data: ThoughtUpdateDataInput!
}

input ThoughtUpsertWithWhereUniqueNestedInput {
  where: ThoughtWhereUniqueInput!
  update: ThoughtUpdateDataInput!
  create: ThoughtCreateInput!
}

input ThoughtWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  character: ID
  character_not: ID
  character_in: [ID!]
  character_not_in: [ID!]
  character_lt: ID
  character_lte: ID
  character_gt: ID
  character_gte: ID
  character_contains: ID
  character_not_contains: ID
  character_starts_with: ID
  character_not_starts_with: ID
  character_ends_with: ID
  character_not_ends_with: ID
  thought: String
  thought_not: String
  thought_in: [String!]
  thought_not_in: [String!]
  thought_lt: String
  thought_lte: String
  thought_gt: String
  thought_gte: String
  thought_contains: String
  thought_not_contains: String
  thought_starts_with: String
  thought_not_starts_with: String
  thought_ends_with: String
  thought_not_ends_with: String
  quality: Boolean
  quality_not: Boolean
  source: ID
  source_not: ID
  source_in: [ID!]
  source_not_in: [ID!]
  source_lt: ID
  source_lte: ID
  source_gt: ID
  source_gte: ID
  source_contains: ID
  source_not_contains: ID
  source_starts_with: ID
  source_not_starts_with: ID
  source_ends_with: ID
  source_not_ends_with: ID
  process: ID
  process_not: ID
  process_in: [ID!]
  process_not_in: [ID!]
  process_lt: ID
  process_lte: ID
  process_gt: ID
  process_gte: ID
  process_contains: ID
  process_not_contains: ID
  process_starts_with: ID
  process_not_starts_with: ID
  process_ends_with: ID
  process_not_ends_with: ID
  path: ID
  path_not: ID
  path_in: [ID!]
  path_not_in: [ID!]
  path_lt: ID
  path_lte: ID
  path_gt: ID
  path_gte: ID
  path_contains: ID
  path_not_contains: ID
  path_starts_with: ID
  path_not_starts_with: ID
  path_ends_with: ID
  path_not_ends_with: ID
  feeling: ID
  feeling_not: ID
  feeling_in: [ID!]
  feeling_not_in: [ID!]
  feeling_lt: ID
  feeling_lte: ID
  feeling_gt: ID
  feeling_gte: ID
  feeling_contains: ID
  feeling_not_contains: ID
  feeling_starts_with: ID
  feeling_not_starts_with: ID
  feeling_ends_with: ID
  feeling_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  prayedAt: DateTime
  prayedAt_not: DateTime
  prayedAt_in: [DateTime!]
  prayedAt_not_in: [DateTime!]
  prayedAt_lt: DateTime
  prayedAt_lte: DateTime
  prayedAt_gt: DateTime
  prayedAt_gte: DateTime
  sharedAt: DateTime
  sharedAt_not: DateTime
  sharedAt_in: [DateTime!]
  sharedAt_not_in: [DateTime!]
  sharedAt_lt: DateTime
  sharedAt_lte: DateTime
  sharedAt_gt: DateTime
  sharedAt_gte: DateTime
  amendedAt: DateTime
  amendedAt_not: DateTime
  amendedAt_in: [DateTime!]
  amendedAt_not_in: [DateTime!]
  amendedAt_lt: DateTime
  amendedAt_lte: DateTime
  amendedAt_gt: DateTime
  amendedAt_gte: DateTime
  resolvedAt: DateTime
  resolvedAt_not: DateTime
  resolvedAt_in: [DateTime!]
  resolvedAt_not_in: [DateTime!]
  resolvedAt_lt: DateTime
  resolvedAt_lte: DateTime
  resolvedAt_gt: DateTime
  resolvedAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  AND: [ThoughtWhereInput!]
  OR: [ThoughtWhereInput!]
  NOT: [ThoughtWhereInput!]
}

input ThoughtWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    